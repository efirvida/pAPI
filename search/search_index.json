{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pAPI \u2014 Pluggable Python API Framework","text":"<p>GitHub: https://github.com/efirvida/papi</p> <p>pAPI is a lightweight, modular micro-framework built on top of FastAPI. It leverages FastAPI\u2019s full feature set\u2014routing, dependency injection, async support\u2014without altering its internals or impacting performance. Instead, it enhances FastAPI\u2019s routing system with dynamic discovery, a plugin-based architecture, and first-class support for agent-native endpoints, such as tools exposed via the Model Context Protocol (MCP). This makes pAPI especially well-suited for building composable microservices, intelligent agent interfaces, and modular backends.</p>"},{"location":"#what-is-papi","title":"\u2699\ufe0f What is pAPI?","text":"<p>pAPI is designed to let you build composable APIs through reusable \"addons\" (self-contained units of logic). It handles:</p> <ul> <li>Addon registration and lifecycle</li> <li>Auto-discovery of routers and models</li> <li>Dependency resolution between addons</li> <li>Consistent response formatting</li> <li>Database abstraction with async support</li> <li>Direct exposure of FastAPI routes as tools compatible with the Model Context Protocol (MCP) \u2014 enabling seamless integration with LLM-based agents</li> </ul>"},{"location":"#core-features","title":"\ud83d\udd27 Core Features","text":""},{"location":"#modular-architecture","title":"\ud83e\udde9 Modular Architecture","text":"<ul> <li>Addons are self-contained: they register their own routers, models, and lifecycle hooks.</li> <li>Route behavior can be extended or overridden by other addons.</li> <li>Each addon can expose tools through standard HTTP endpoints or as Model Context Protocol (MCP)-compatible tools for agent-based workflows.</li> </ul>"},{"location":"#agent-native-interface","title":"\ud83e\udd16 Agent-Native Interface","text":"<p>pAPI is designed with LLM-driven agents in mind. It allows you to expose FastAPI endpoints as Model Context Protocol (MCP)-compatible tools with minimal effort, supporting both JSON-over-HTTP and Server-Sent Events (SSE) for streaming.</p> <p>\u2705 One-line tool exposure \u2705 Seamless integration with LLM agents</p> <p>Expose a tool in a single line:</p> <pre><code>from papi.core.router import RESTRouter\n\nrouter = RESTRouter()\n\n@router.get(\"/tool\", expose_as_mcp_tool=True)\nasync def my_tool():\n    return {\"result\": \"tool output\"}\n</code></pre> <p>Once exposed, your tools are automatically discoverable via SSE:</p> <pre><code>{\n  \"name\": \"pAPI\",\n  \"type\": \"sse\",\n  \"url\": \"http://localhost:8000/sse\"\n}\n</code></pre> <p>If you need to expose MCP tools directly without API endpoints, you can use <code>MCPRouter</code>, which is a thin wrapper around <code>FastMCP</code>:</p> <pre><code>from papi.core.router import MCPRouter\n\nrouter = MCPRouter()\n\n@router.tool()\nasync def my_tool():\n    return {\"result\": \"tool output\"}\n</code></pre> <p>Start the full API + MCP tools with:</p> <pre><code>rye run python papi/cli.py webserver\n</code></pre> <p>Or launch just the MCP interface:</p> <pre><code>rye run python papi/cli.py mcpserver\n</code></pre>"},{"location":"#built-in-database-layer","title":"\ud83d\uddc4\ufe0f Built-in Database Layer","text":"<p>pAPI offers first-class support for multiple asynchronous databases, making it easy to combine different storage backends within a single application. The database layer is declarative and dynamic \u2014 connections are only initialized when relevant models are discovered at runtime.</p> <p>Supported backends:</p> Backend Library Typical Use Case MongoDB Beanie Document-oriented storage PostgreSQL SQLAlchemy Relational databases Redis aioredis Caching, queues, distributed locks"},{"location":"#smart-and-flexible-integration","title":"\u2705 Smart and Flexible Integration","text":"<ul> <li>Models are automatically discovered during startup by inspecting enabled addons.</li> <li>Each addon can define its own models or extend models from other addons to add new fields, relations, or behaviors.</li> <li>No need for central registration \u2014 model discovery is fully modular.</li> <li>Unused databases are ignored, so you only pay for what you use.</li> </ul> <p>This architecture allows true decoupling between services. For example, one addon can provide core user models, and another can enhance those with metadata, analytics, or external account bindings \u2014 all without modifying the original addon code.</p> <p>\ud83d\udca1 Tip: The system is ORM/ODM-agnostic \u2014 you can bring your own schema logic and override or compose behaviors freely.</p>"},{"location":"#unified-response-system","title":"\ud83d\udce6 Unified Response System","text":"<p>pAPI provides an optional but powerful mechanism for standardizing responses across all endpoints. This promotes consistency, improves debuggability, and facilitates client integration\u2014but does not constrain developers. You can continue to use raw FastAPI responses where desired.</p>"},{"location":"#structured-response-format","title":"\ud83e\uddf1 Structured Response Format","text":"<p>The framework offers a unified schema via the <code>APIResponse</code> model:</p> <pre><code>class APIResponse(BaseModel):\n    success: bool\n    message: Optional[str]\n    data: Optional[Any]\n    error: Optional[APIError]\n    meta: Meta\n</code></pre> <p>Key components include:</p> <ul> <li>\u2705 <code>success</code>: Boolean flag indicating request outcome</li> <li>\ud83d\udce6 <code>data</code>: Response payload (included only if successful)</li> <li>\u26a0\ufe0f <code>error</code>: Structured error object (included only on failure)</li> <li>\ud83d\udcac <code>message</code>: Optional human-readable message</li> <li>\ud83d\udcca <code>meta</code>: Metadata (e.g., timestamp, request ID)</li> </ul>"},{"location":"#create_response-standardized-response-builder","title":"\u2699\ufe0f <code>create_response</code>: Standardized Response Builder","text":"<p>The <code>create_response()</code> helper generates well-formed <code>APIResponse</code> objects with minimal boilerplate:</p> <pre><code>from papi.core.response import create_response\n\n@app.get(\"/hello\")\nasync def hello():\n    return create_response(data={\"message\": \"Hello, world!\"})\n</code></pre> <p>Internally, it wraps the payload with standardized metadata and, when applicable, error details.</p> <pre><code>def create_response(\n    data: Any = None,\n    success: bool = True,\n    message: Optional[str] = None,\n    error: Optional[Dict[str, Any]] = None,\n) -&gt; APIResponse:\n    ...\n</code></pre> <p>Error objects can include:</p> <ul> <li><code>code</code>: Application-specific error identifier</li> <li><code>message</code>: Short description</li> <li><code>detail</code>: Arbitrary contextual data</li> <li><code>status_code</code>: HTTP status code to be returned</li> </ul>"},{"location":"#unified-exception-handling","title":"\ud83d\udea8 Unified Exception Handling","text":"<p>The optional <code>APIException</code> class makes it easy to raise consistent, structured errors:</p> <pre><code>raise APIException(\n    status_code=403,\n    message=\"Access denied\",\n    code=\"PERMISSION_DENIED\",\n    detail={\"required_role\": \"admin\"}\n)\n</code></pre> <p>All <code>APIException</code>s are automatically serialized into the same response format used by <code>create_response</code>, ensuring uniformity across success and error cases.</p> <p>\u2139\ufe0f This system is opt-in: developers retain full control and can use native FastAPI <code>JSONResponse</code>, <code>Response</code>, or any custom return logic as needed.</p>"},{"location":"#developer-friendly-cli","title":"\ud83d\udee0\ufe0f Developer-Friendly CLI","text":"<p>pAPI ships with a basic CLI designed to streamline development, introspection, and deployment workflows.</p> <pre><code>$ papi_cli start webserver   # Launch the FastAPI server with all registered addons\n$ papi_cli start mcpserver   # Run the standalone MCP (agent) server\n$ papi_cli shell             # Open an interactive, async-ready developer shell\n</code></pre>"},{"location":"#key-features","title":"\ud83e\udde0 Key Features","text":"<ul> <li>\u2705 Async-aware interactive shell (with full <code>await</code> support), powered by IPython if available.</li> <li>\u2699\ufe0f Config-aware: automatically loads <code>config.yaml</code> and injects environment context.</li> </ul>"},{"location":"#cli-overview","title":"\ud83e\uddea CLI Overview","text":"<pre><code>$ rye run python papi/cli.py --help\n</code></pre> <pre><code>Usage: cli.py [OPTIONS] COMMAND [ARGS]...\n\n  Main entry point for pAPI service management CLI.\n\nOptions:\n  --config TEXT  Path to configuration file\n  -h, --help     Show this message and exit.\n\nCommands:\n  webserver*  Start the production FastAPI web server.\n  mcpserver   Start the standalone MCP server.\n  shell       Launch an interactive IPython shell with the initialized...\n</code></pre>"},{"location":"#interactive-shell-utilities","title":"\ud83d\udc1a Interactive Shell Utilities","text":"<p>The <code>shell</code> command loads a fully-initialized runtime context, including all registered database models and configurations.</p>"},{"location":"#mongodb-integration","title":"MongoDB Integration","text":"<p>MongoDB documents are registered and accessible via the <code>mongo_documents</code> dictionary:</p> <pre><code>await mongo_documents[\"Image\"].find().to_list()\n</code></pre> <p>Each key is the document class name, and the value is the corresponding <code>Beanie</code> model class.</p>"},{"location":"#sqlalchemy-integration","title":"SQLAlchemy Integration","text":"<p>SQL models are exposed via the <code>sql_models</code> dictionary, enabling expressive, async queries with full SQLAlchemy support:</p> <pre><code>from sqlalchemy import select\n\nstmt = select(sql_models[\"User\"]).where(sql_models[\"User\"].email == \"admin@example.com\")\nresult = await db_session.execute(stmt)\nuser = result.scalar_one_or_none()\n</code></pre> <p>This makes the shell ideal for advanced debugging, quick prototyping, and admin scripting\u2014all with full access to the live database and application context.</p>"},{"location":"#addon-system","title":"\ud83d\udce6 Addon System","text":"<p>pAPI provides a robust, modular plugin system via addons\u2014isolated Python modules that encapsulate logic, routes, models, configuration, and static assets. This architecture promotes separation of concerns, extensibility, and reusability.</p>"},{"location":"#anatomy-of-an-addon","title":"\ud83e\uddec Anatomy of an Addon","text":"<pre><code>addons/\n\u2514\u2500\u2500 user_auth_system/\n    \u251c\u2500\u2500 static/\n    \u2502   \u2514\u2500\u2500 static_files/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 manifest.yaml\n    \u251c\u2500\u2500 routers.py\n    \u2514\u2500\u2500 models.py\n</code></pre> <p>Each addon behaves as a self-contained package and is dynamically discovered and registered at runtime based on the configuration.</p>"},{"location":"#manifestyaml","title":"\ud83d\udcd1 <code>manifest.yaml</code>","text":"<p>The mandatory <code>manifest.yaml</code> file defines metadata and dependencies for each addon:</p> <pre><code>name: user_auth_system\nversion: 0.1.0\ndescription: Built-in user authentication system\nauthor: pAPI Team\n\ndependencies:\n  - image_storage\n\npython_dependencies:\n  - passlib\n  - pydantic[email]\n</code></pre>"},{"location":"#addon-dependencies","title":"\ud83d\udd17 Addon Dependencies","text":"<ul> <li>The <code>dependencies</code> field declares other addons that must be loaded before this one.</li> <li>Dependency resolution ensures proper load order and allows addons to extend or reuse logic and models from other addons.</li> </ul>"},{"location":"#python-dependencies","title":"\ud83d\udc0d Python Dependencies","text":"<ul> <li>The <code>python_dependencies</code> section specifies required PyPI packages for this addon.</li> <li>These dependencies will be automatically installed with <code>pip install</code> on every startup.</li> <li>\u26a0\ufe0f Use with care: untrusted or unnecessary packages may affect system stability or introduce security risks.</li> </ul>"},{"location":"#example-configuration-configyaml","title":"\ud83e\uddea Example Configuration (<code>config.yaml</code>)","text":"<pre><code>logger:\n  level: \"INFO\"\n  log_file: ./papi.log\n\ninfo:                                   # FastAPI settings\n  title: \"Testing API Server\"\n  version: \"1.0.0\"\n  description: \"Test instance for local development\"\n\nserver:                                # uvicorn settings\n  host: \"127.0.0.1\"\n  port: 8000\n\ndatabase:\n  mongodb_uri: \"mongodb://root:example@localhost:27017/testing_db?authSource=admin\"\n  sql_uri: \"postgresql+asyncpg://localhost/testing_db\"\n  redis_uri: \"redis://localhost:6379\"\n\naddons:\n  extra_addons_path: \"/path/to/local/addons\"\n  enabled:\n    - user_auth_system # this will load image_storage as dependency\n  config:              # Addons configuration\n    user_auth_system:\n      security:\n        access_token_expire_minutes: 60\n        allow_weak_passwords: true\n        lockout_duration_minutes: 15\n        bcrypt_rounds: 15\n        hash_algorithm: \"HS256\"\n        max_login_attempts: 5\n        secret_key: \"your-secret-key\"\n        token_audience: bohio.com\n        token_issuer: bohio.com\n        key_rotation:\n          rotation_interval_days: 30\n          max_historical_keys: 3\n    image_storage:\n      image_optimization:\n        max_dimension:   2048\n        jpeg_quality:    85\n        png_compression: 6\n        webp_quality:    80\n        force_format:    WEBP\n      cache_ttl:      3600\n      cache_prefix:   \"pAPI:image_storage:\"\n      max_image_size: 10485760\n      allowed_formats:\n        - JPEG\n        - PNG\n        - WEBP\n        - GIF\n      storage_backend: local\n\nstorage: # mounted as static files to provide global static files foled\n  files: \"path/to/local/storage/folder/files\"\n  images: \"path/to/local/storage/folder/images\" # used for image_storage addon\n</code></pre>"},{"location":"#quickstart","title":"\ud83d\ude80 Quickstart","text":"<pre><code>git clone https://github.com/your-org/papi\ncd papi\nrye sync\nrye run python papi/cli.py webserver\n</code></pre>"},{"location":"#use-cases","title":"\ud83e\udde0 Use Cases","text":"<p>pAPI is designed to enable modern backend patterns with minimal boilerplate. Some typical use cases include:</p> <ul> <li> <p>Agent-Integrated APIs   Seamlessly expose tool-like endpoints to LLM agents and orchestration frameworks via native MCP support and SSE-compatible interfaces.</p> </li> <li> <p>Plugin-Driven Architectures   Build extensible backends for low-code/no-code platforms or SaaS systems, where features are delivered as isolated, dynamically loaded addons.</p> </li> <li> <p>Multi-Tenant and Domain-Based Systems   Architect modular applications where business logic, models, and routes are grouped by tenant, domain, or business unit.</p> </li> <li> <p>Internal Developer Tools &amp; Microservices   Rapidly prototype lightweight internal services, MCP tools that benefit from a unified config, database access.</p> </li> </ul>"},{"location":"#contributing","title":"\ud83d\udcec Contributing","text":"<p>We welcome pull requests!</p> <pre><code># fork and clone\ngit checkout -b feature/my-feature\n# write tests if applicable\ngit commit -m \"Add my-feature\"\ngit push origin feature/my-feature\n</code></pre> <p>Then open a PR on GitHub. \ud83d\ude80</p>"},{"location":"#license","title":"\ud83e\udeaa License","text":"<p>MIT License \u00a9 2025 \u2014 Eduardo Miguel Firvida Donestevez</p>"},{"location":"reference/db/","title":"<code>papi.core.db</code>","text":""},{"location":"reference/models/","title":"<code>papi.core.models</code>","text":""},{"location":"reference/models/#papi.core.models.config.AppConfig","title":"<code>AppConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Top-level application configuration schema.</p> <p>Groups all subcomponents of the configuration under named sections.</p> <p>Attributes:</p> Name Type Description <code>logger</code> <code>LoggerConfig</code> <p>Logging configuration.</p> <code>info</code> <code>GeneralInfoConfig</code> <p>General metadata.</p> <code>server</code> <code>ServerConfig</code> <p>Server options.</p> <code>database</code> <code>DatabaseConfig</code> <p>Connection strings for databases.</p> <code>apps</code> <code>AppsConfig</code> <p>Plugin system configuration.</p> <code>storage</code> <code>StorageConfig</code> <p>Paths for file/image storage.</p> Example <pre><code>AppConfig(\n    logger=LoggerConfig(level=\"INFO\"),\n    info=GeneralInfoConfig(title=\"My API\"),\n    server=ServerConfig(host=\"0.0.0.0\", port=8080),\n    database=DatabaseConfig(sql_uri=\"sqlite:///./db.sqlite\"),\n    apps=AppsConfig(apps_dir=\"./apps\", enabled=[]),\n    storage=StorageConfig(files=\"/data/files\"),\n)\n</code></pre> Source code in <code>papi/core/models/config.py</code> <pre><code>class AppConfig(BaseModel):\n    \"\"\"\n    Top-level application configuration schema.\n\n    Groups all subcomponents of the configuration under named sections.\n\n    Attributes:\n        logger (LoggerConfig): Logging configuration.\n        info (GeneralInfoConfig): General metadata.\n        server (ServerConfig): Server options.\n        database (DatabaseConfig): Connection strings for databases.\n        apps (AppsConfig): Plugin system configuration.\n        storage (StorageConfig): Paths for file/image storage.\n\n    Example:\n        ```python\n        AppConfig(\n            logger=LoggerConfig(level=\"INFO\"),\n            info=GeneralInfoConfig(title=\"My API\"),\n            server=ServerConfig(host=\"0.0.0.0\", port=8080),\n            database=DatabaseConfig(sql_uri=\"sqlite:///./db.sqlite\"),\n            apps=AppsConfig(apps_dir=\"./apps\", enabled=[]),\n            storage=StorageConfig(files=\"/data/files\"),\n        )\n        ```\n    \"\"\"\n\n    logger: LoggerConfig\n    info: FastAPIAppConfig\n    server: ServerConfig\n    apps: AppsConfig\n    database: DatabaseConfig | None = None\n    storage: StorageConfig | None = None\n</code></pre>"},{"location":"reference/models/#papi.core.models.config.FastAPIAppConfig","title":"<code>FastAPIAppConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration model for FastAPI application metadata and settings.</p> <p>This model defines metadata and behavioral options that are passed to the FastAPI constructor. It supports OpenAPI documentation configuration, middleware injection, server settings, and more.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>Optional[str]</code> <p>The title of the application, displayed in API docs and UIs.</p> <code>summary</code> <code>Optional[str]</code> <p>A short summary of the application.</p> <code>description</code> <code>Optional[str]</code> <p>A detailed description of the application, shown in docs.</p> <code>terms_of_service</code> <code>Optional[str]</code> <p>A URL to the terms of service for the API.</p> <code>license_info</code> <code>Optional[Dict[str, Union[str, Any]]]</code> <p>A dictionary specifying the license of the API.</p> <code>contact</code> <code>Optional[Dict[str, Union[str, Any]]]</code> <p>Contact information for the API maintainer.</p> <code>version</code> <code>Optional[str]</code> <p>The application version string.</p> <code>middleware</code> <code>Optional[Sequence[str]]</code> <p>A list of middleware identifiers to include in the app.</p> <code>servers</code> <code>Optional[List[Dict[str, Union[str, Any]]]]</code> <p>A list of server configurations for OpenAPI docs.</p> <code>root_path</code> <code>Optional[str]</code> <p>The root path where the app is mounted.</p> <code>root_path_in_servers</code> <code>Optional[bool]</code> <p>Whether to include the root path in OpenAPI server URLs.</p> <code>openapi_url</code> <code>Optional[str]</code> <p>The path where the OpenAPI schema will be served. Set to None to disable.</p> <code>openapi_tags</code> <code>Optional[List[Dict[str, Any]]]</code> <p>A list of tag definitions for organizing endpoints.</p> <code>docs_url</code> <code>Optional[str]</code> <p>The path to serve Swagger UI documentation. Set to None to disable.</p> <code>redoc_url</code> <code>Optional[str]</code> <p>The path to serve ReDoc documentation. Set to None to disable.</p> <code>swagger_ui_parameters</code> <code>Optional[Dict[str, Any]]</code> <p>Additional parameters to customize Swagger UI.</p> Notes <ul> <li>Extra fields are allowed and will be preserved.</li> <li>Use the <code>defined_fields()</code> method to get only explicitly configured values.</li> </ul> Example <pre><code>config = FastAPIAppConfig(title=\"My API\", version=\"1.0.0\")\nfastapi_app = FastAPI(**config.defined_fields())\n</code></pre> Source code in <code>papi/core/models/config.py</code> <pre><code>class FastAPIAppConfig(BaseModel):\n    \"\"\"\n    Configuration model for FastAPI application metadata and settings.\n\n    This model defines metadata and behavioral options that are passed to the FastAPI constructor.\n    It supports OpenAPI documentation configuration, middleware injection, server settings, and more.\n\n    Attributes:\n        title (Optional[str]): The title of the application, displayed in API docs and UIs.\n        summary (Optional[str]): A short summary of the application.\n        description (Optional[str]): A detailed description of the application, shown in docs.\n        terms_of_service (Optional[str]): A URL to the terms of service for the API.\n        license_info (Optional[Dict[str, Union[str, Any]]]): A dictionary specifying the license of the API.\n        contact (Optional[Dict[str, Union[str, Any]]]): Contact information for the API maintainer.\n        version (Optional[str]): The application version string.\n\n        middleware (Optional[Sequence[str]]): A list of middleware identifiers to include in the app.\n\n        servers (Optional[List[Dict[str, Union[str, Any]]]]): A list of server configurations for OpenAPI docs.\n        root_path (Optional[str]): The root path where the app is mounted.\n        root_path_in_servers (Optional[bool]): Whether to include the root path in OpenAPI server URLs.\n\n        openapi_url (Optional[str]): The path where the OpenAPI schema will be served. Set to None to disable.\n        openapi_tags (Optional[List[Dict[str, Any]]]): A list of tag definitions for organizing endpoints.\n        docs_url (Optional[str]): The path to serve Swagger UI documentation. Set to None to disable.\n        redoc_url (Optional[str]): The path to serve ReDoc documentation. Set to None to disable.\n        swagger_ui_parameters (Optional[Dict[str, Any]]): Additional parameters to customize Swagger UI.\n\n    Notes:\n        - Extra fields are allowed and will be preserved.\n        - Use the `defined_fields()` method to get only explicitly configured values.\n\n    Example:\n        ```python\n        config = FastAPIAppConfig(title=\"My API\", version=\"1.0.0\")\n        fastapi_app = FastAPI(**config.defined_fields())\n        ```\n    \"\"\"\n\n    title: Optional[str] = \"pAPI Platform\"\n    summary: Optional[str] = None\n    description: Optional[str] = \"pAPI core API Platform\"\n    terms_of_service: Optional[str] = None\n    license_info: Optional[Dict[str, Union[str, Any]]] = None\n    contact: Optional[Dict[str, Union[str, Any]]] = None\n    version: Optional[str] = \"\"\n\n    middleware: Optional[Sequence[str]] = []\n\n    servers: Optional[List[Dict[str, Union[str, Any]]]] = None\n    root_path: Optional[str] = None\n    root_path_in_servers: Optional[bool] = None\n\n    openapi_url: Optional[str] = None\n    openapi_tags: Optional[List[Dict[str, Any]]] = None\n    docs_url: Optional[str] = None\n    redoc_url: Optional[str] = None\n    swagger_ui_parameters: Optional[Dict[str, Any]] = None\n\n    model_config = {\n        \"extra\": \"allow\",\n        \"populate_by_name\": True,\n    }\n\n    def defined_fields(self) -&gt; Dict[str, Any]:\n        \"\"\"\n        Returns a dictionary with only the fields that have been explicitly set by the user,\n        excluding default values and unset or None fields.\n\n        Useful when passing configuration to FastAPI or related tools.\n\n        Returns:\n            Dict[str, Any]: A dictionary of defined configuration fields.\n        \"\"\"\n        return self.model_dump(\n            exclude_unset=True,\n            exclude_defaults=True,\n            exclude_none=True,\n        )\n</code></pre>"},{"location":"reference/models/#papi.core.models.config.FastAPIAppConfig.defined_fields","title":"<code>defined_fields()</code>","text":"<p>Returns a dictionary with only the fields that have been explicitly set by the user, excluding default values and unset or None fields.</p> <p>Useful when passing configuration to FastAPI or related tools.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary of defined configuration fields.</p> Source code in <code>papi/core/models/config.py</code> <pre><code>def defined_fields(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Returns a dictionary with only the fields that have been explicitly set by the user,\n    excluding default values and unset or None fields.\n\n    Useful when passing configuration to FastAPI or related tools.\n\n    Returns:\n        Dict[str, Any]: A dictionary of defined configuration fields.\n    \"\"\"\n    return self.model_dump(\n        exclude_unset=True,\n        exclude_defaults=True,\n        exclude_none=True,\n    )\n</code></pre>"},{"location":"reference/models/#papi.core.models.config.UvicornServerConfig","title":"<code>UvicornServerConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration model for Uvicorn server runtime.</p> <p>This model encapsulates all server-level parameters that can be passed to <code>uvicorn.run()</code>. It supports fine-grained control over networking, protocol, concurrency, SSL, live-reload, and more.</p> <p>Attributes:</p> Name Type Description <code>host</code> <code>str</code> <p>The hostname or IP address where the server will bind.</p> <code>port</code> <code>int</code> <p>The TCP port where the server will listen (must be between 1 and 65535).</p> <code>uds</code> <code>Optional[Union[str, Path]]</code> <p>Unix domain socket path to bind instead of host/port.</p> <code>fd</code> <code>Optional[int]</code> <p>File descriptor to bind instead of host/port/uds.</p> <code>loop</code> <code>str</code> <p>Event loop implementation to use (e.g., \"auto\", \"uvloop\", \"asyncio\").</p> <code>http</code> <code>Union[str, type]</code> <p>HTTP protocol class or string identifier.</p> <code>ws</code> <code>Union[str, type]</code> <p>WebSocket protocol class or string identifier.</p> <code>ws_max_size</code> <code>int</code> <p>Maximum size for incoming WebSocket messages.</p> <code>ws_max_queue</code> <code>int</code> <p>Maximum number of messages allowed in receive queue.</p> <code>ws_ping_interval</code> <code>Optional[float]</code> <p>Interval in seconds to send ping frames.</p> <code>ws_ping_timeout</code> <code>Optional[float]</code> <p>Timeout for WebSocket pings.</p> <code>ws_per_message_deflate</code> <code>bool</code> <p>Enable per-message compression for WebSockets.</p> <code>lifespan</code> <code>str</code> <p>Lifespan handling mode: \"auto\", \"on\", or \"off\".</p> <code>env_file</code> <code>Optional[Union[str, Path]]</code> <p>Path to a <code>.env</code> file with environment variables.</p> <code>interface</code> <code>str</code> <p>Server interface type (\"auto\", \"asgi3\", \"asgi2\", or \"wsgi\").</p> <code>reload</code> <code>bool</code> <p>Enable auto-reload in development mode.</p> <code>reload_dirs</code> <code>Optional[Union[str, List[str]]]</code> <p>Directories to watch for reload.</p> <code>reload_delay</code> <code>float</code> <p>Delay in seconds before reloading after changes.</p> <code>reload_includes</code> <code>Optional[Union[str, List[str]]]</code> <p>Glob patterns to include in reload.</p> <code>reload_excludes</code> <code>Optional[Union[str, List[str]]]</code> <p>Glob patterns to exclude from reload.</p> <code>workers</code> <code>Optional[int]</code> <p>Number of worker processes to spawn.</p> <code>proxy_headers</code> <code>bool</code> <p>Trust proxy headers (e.g., <code>X-Forwarded-For</code>).</p> <code>server_header</code> <code>bool</code> <p>Send the <code>Server</code> header in responses.</p> <code>date_header</code> <code>bool</code> <p>Send the <code>Date</code> header in responses.</p> <code>forwarded_allow_ips</code> <code>Optional[Union[str, List[str]]]</code> <p>List or string of IPs allowed to set forwarded headers.</p> <code>root_path</code> <code>str</code> <p>Root path to mount the application under.</p> <code>limit_concurrency</code> <code>Optional[int]</code> <p>Maximum number of concurrent connections.</p> <code>limit_max_requests</code> <code>Optional[int]</code> <p>Maximum number of requests before a worker is restarted.</p> <code>backlog</code> <code>int</code> <p>Maximum number of pending connections.</p> <code>timeout_keep_alive</code> <code>int</code> <p>Keep-alive timeout in seconds.</p> <code>timeout_notify</code> <code>int</code> <p>Timeout to notify of graceful shutdown.</p> <code>timeout_graceful_shutdown</code> <code>Optional[int]</code> <p>Max time allowed for graceful shutdown.</p> <code>ssl_keyfile</code> <code>Optional[Union[str, Path]]</code> <p>Path to the SSL key file.</p> <code>ssl_certfile</code> <code>Optional[Union[str, Path]]</code> <p>Path to the SSL certificate file.</p> <code>ssl_keyfile_password</code> <code>Optional[str]</code> <p>Password for the SSL key file, if encrypted.</p> <code>ssl_version</code> <code>int</code> <p>SSL protocol version (e.g., <code>ssl.PROTOCOL_TLS</code>).</p> <code>ssl_cert_reqs</code> <code>int</code> <p>Whether client certificates are required.</p> <code>ssl_ca_certs</code> <code>Optional[str]</code> <p>Path to CA certificates file.</p> <code>ssl_ciphers</code> <code>str</code> <p>String of ciphers to use for SSL connections.</p> <code>headers</code> <code>Optional[List[Tuple[str, str]]]</code> <p>List of custom headers to add to responses.</p> <code>h11_max_incomplete_event_size</code> <code>Optional[int]</code> <p>Limit for HTTP/1.1 incomplete event size.</p> Notes <ul> <li>Extra fields are allowed and will be preserved.</li> <li>Use the <code>defined_fields()</code> method to retrieve only explicitly set values.</li> </ul> Example <pre><code>config = UvicornServerConfig(host=\"0.0.0.0\", port=8080, reload=True)\nuvicorn.run(app, **config.defined_fields())\n</code></pre> Source code in <code>papi/core/models/config.py</code> <pre><code>class UvicornServerConfig(BaseModel):\n    \"\"\"\n    Configuration model for Uvicorn server runtime.\n\n    This model encapsulates all server-level parameters that can be passed to `uvicorn.run()`.\n    It supports fine-grained control over networking, protocol, concurrency,\n    SSL, live-reload, and more.\n\n    Attributes:\n        host (str): The hostname or IP address where the server will bind.\n        port (int): The TCP port where the server will listen (must be between 1 and 65535).\n        uds (Optional[Union[str, Path]]): Unix domain socket path to bind instead of host/port.\n        fd (Optional[int]): File descriptor to bind instead of host/port/uds.\n        loop (str): Event loop implementation to use (e.g., \"auto\", \"uvloop\", \"asyncio\").\n        http (Union[str, type]): HTTP protocol class or string identifier.\n        ws (Union[str, type]): WebSocket protocol class or string identifier.\n        ws_max_size (int): Maximum size for incoming WebSocket messages.\n        ws_max_queue (int): Maximum number of messages allowed in receive queue.\n        ws_ping_interval (Optional[float]): Interval in seconds to send ping frames.\n        ws_ping_timeout (Optional[float]): Timeout for WebSocket pings.\n        ws_per_message_deflate (bool): Enable per-message compression for WebSockets.\n        lifespan (str): Lifespan handling mode: \"auto\", \"on\", or \"off\".\n        env_file (Optional[Union[str, Path]]): Path to a `.env` file with environment variables.\n        interface (str): Server interface type (\"auto\", \"asgi3\", \"asgi2\", or \"wsgi\").\n        reload (bool): Enable auto-reload in development mode.\n        reload_dirs (Optional[Union[str, List[str]]]): Directories to watch for reload.\n        reload_delay (float): Delay in seconds before reloading after changes.\n        reload_includes (Optional[Union[str, List[str]]]): Glob patterns to include in reload.\n        reload_excludes (Optional[Union[str, List[str]]]): Glob patterns to exclude from reload.\n        workers (Optional[int]): Number of worker processes to spawn.\n        proxy_headers (bool): Trust proxy headers (e.g., `X-Forwarded-For`).\n        server_header (bool): Send the `Server` header in responses.\n        date_header (bool): Send the `Date` header in responses.\n        forwarded_allow_ips (Optional[Union[str, List[str]]]): List or string of IPs allowed to set forwarded headers.\n        root_path (str): Root path to mount the application under.\n        limit_concurrency (Optional[int]): Maximum number of concurrent connections.\n        limit_max_requests (Optional[int]): Maximum number of requests before a worker is restarted.\n        backlog (int): Maximum number of pending connections.\n        timeout_keep_alive (int): Keep-alive timeout in seconds.\n        timeout_notify (int): Timeout to notify of graceful shutdown.\n        timeout_graceful_shutdown (Optional[int]): Max time allowed for graceful shutdown.\n        ssl_keyfile (Optional[Union[str, Path]]): Path to the SSL key file.\n        ssl_certfile (Optional[Union[str, Path]]): Path to the SSL certificate file.\n        ssl_keyfile_password (Optional[str]): Password for the SSL key file, if encrypted.\n        ssl_version (int): SSL protocol version (e.g., `ssl.PROTOCOL_TLS`).\n        ssl_cert_reqs (int): Whether client certificates are required.\n        ssl_ca_certs (Optional[str]): Path to CA certificates file.\n        ssl_ciphers (str): String of ciphers to use for SSL connections.\n        headers (Optional[List[Tuple[str, str]]]): List of custom headers to add to responses.\n        h11_max_incomplete_event_size (Optional[int]): Limit for HTTP/1.1 incomplete event size.\n\n    Notes:\n        - Extra fields are allowed and will be preserved.\n        - Use the `defined_fields()` method to retrieve only explicitly set values.\n\n    Example:\n        ```python\n        config = UvicornServerConfig(host=\"0.0.0.0\", port=8080, reload=True)\n        uvicorn.run(app, **config.defined_fields())\n        ```\n    \"\"\"\n\n    host: str = Field(\n        default=\"127.0.0.1\", description=\"Hostname or IP address to bind the server.\"\n    )\n    port: int = Field(\n        default=8000,\n        description=\"Port to bind the server (must be between 1 and 65535).\",\n    )\n\n    uds: Optional[Union[str, Path]] = None\n    fd: Optional[int] = None\n    loop: str = \"auto\"\n    http: Union[str, type] = \"auto\"\n    ws: Union[str, type] = \"auto\"\n    ws_max_size: int = 16 * 1024 * 1024\n    ws_max_queue: int = 32\n    ws_ping_interval: Optional[float] = 20.0\n    ws_ping_timeout: Optional[float] = 20.0\n    ws_per_message_deflate: bool = True\n    lifespan: str = \"auto\"\n    env_file: Optional[Union[str, Path]] = None\n    access_log: bool = True\n    use_colors: Optional[bool] = None\n    interface: str = \"auto\"\n    reload: bool = False\n    reload_dirs: Optional[Union[str, List[str]]] = None\n    reload_delay: float = 0.25\n    reload_includes: Optional[Union[str, List[str]]] = None\n    reload_excludes: Optional[Union[str, List[str]]] = None\n    workers: Optional[int] = None\n    proxy_headers: bool = True\n    server_header: bool = True\n    date_header: bool = True\n    forwarded_allow_ips: Optional[Union[str, List[str]]] = None\n    root_path: str = \"\"\n    limit_concurrency: Optional[int] = None\n    limit_max_requests: Optional[int] = None\n    backlog: int = 2048\n    timeout_keep_alive: int = 5\n    timeout_notify: int = 30\n    timeout_graceful_shutdown: Optional[int] = None\n    ssl_keyfile: Optional[Union[str, Path]] = None\n    ssl_certfile: Optional[Union[str, Path]] = None\n    ssl_keyfile_password: Optional[str] = None\n    ssl_version: int = ssl.PROTOCOL_TLS\n    ssl_cert_reqs: int = ssl.CERT_NONE\n    ssl_ca_certs: Optional[str] = None\n    ssl_ciphers: str = \"TLSv1\"\n    headers: Optional[List[Tuple[str, str]]] = None\n    h11_max_incomplete_event_size: Optional[int] = None\n\n    model_config = {\n        \"extra\": \"allow\",\n        \"populate_by_name\": True,\n    }\n\n    def defined_fields(self) -&gt; dict:\n        \"\"\"\n        Return only the fields explicitly defined by the user,\n        excluding unset fields, defaults, and None values.\n\n        Returns:\n            dict: A dictionary with the explicitly set configuration fields.\n        \"\"\"\n        return self.model_dump(\n            exclude_unset=True,\n            exclude_defaults=True,\n            exclude_none=True,\n        )\n\n    @field_validator(\"port\")\n    def validate_port(cls, v: int) -&gt; int:\n        \"\"\"Ensure that the port is within the valid range (1\u201365535).\"\"\"\n        if not (1 &lt;= v &lt;= 65535):\n            raise ValueError(\"Port must be between 1 and 65535\")\n        return v\n</code></pre>"},{"location":"reference/models/#papi.core.models.config.UvicornServerConfig.defined_fields","title":"<code>defined_fields()</code>","text":"<p>Return only the fields explicitly defined by the user, excluding unset fields, defaults, and None values.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary with the explicitly set configuration fields.</p> Source code in <code>papi/core/models/config.py</code> <pre><code>def defined_fields(self) -&gt; dict:\n    \"\"\"\n    Return only the fields explicitly defined by the user,\n    excluding unset fields, defaults, and None values.\n\n    Returns:\n        dict: A dictionary with the explicitly set configuration fields.\n    \"\"\"\n    return self.model_dump(\n        exclude_unset=True,\n        exclude_defaults=True,\n        exclude_none=True,\n    )\n</code></pre>"},{"location":"reference/models/#papi.core.models.config.UvicornServerConfig.validate_port","title":"<code>validate_port(v)</code>","text":"<p>Ensure that the port is within the valid range (1\u201365535).</p> Source code in <code>papi/core/models/config.py</code> <pre><code>@field_validator(\"port\")\ndef validate_port(cls, v: int) -&gt; int:\n    \"\"\"Ensure that the port is within the valid range (1\u201365535).\"\"\"\n    if not (1 &lt;= v &lt;= 65535):\n        raise ValueError(\"Port must be between 1 and 65535\")\n    return v\n</code></pre>"},{"location":"reference/models/#papi.core.models.config.LoggerConfig","title":"<code>LoggerConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Logging configuration for the application.</p> <p>Attributes:</p> Name Type Description <code>level</code> <code>Optional[LoggerLevel]</code> <p>Logging level (INFO or DEBUG).</p> <code>log_file</code> <code>Optional[str]</code> <p>Optional path to a log file.</p> <code>json_log</code> <code>Optional[bool]</code> <p>Whether to output logs in JSON format.</p> Example <pre><code>LoggerConfig(level=\"DEBUG\", log_file=\"logs/app.log\", json_log=True)\n</code></pre> Source code in <code>papi/core/models/config.py</code> <pre><code>class LoggerConfig(BaseModel):\n    \"\"\"\n    Logging configuration for the application.\n\n    Attributes:\n        level (Optional[LoggerLevel]): Logging level (INFO or DEBUG).\n        log_file (Optional[str]): Optional path to a log file.\n        json_log (Optional[bool]): Whether to output logs in JSON format.\n\n    Example:\n        ```python\n        LoggerConfig(level=\"DEBUG\", log_file=\"logs/app.log\", json_log=True)\n        ```\n    \"\"\"\n\n    level: Optional[LoggerLevel] = LoggerLevel.INFO\n    log_file: Optional[str] = None\n    json_log: Optional[bool] = False\n</code></pre>"},{"location":"reference/models/#papi.core.models.config.DatabaseConfig","title":"<code>DatabaseConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Database configuration supporting both simple and structured modes.</p> <p>This model supports two ways to configure your database engines:</p> <ol> <li> <p>Simple Mode:     Use <code>mongodb_uri</code>, <code>sql_uri</code>, and <code>redis_uri</code> directly for quick setup.</p> </li> <li> <p>Advanced Mode:     Use the <code>backends</code> field to provide per-backend configuration.</p> </li> </ol> <p>The simple URIs will be automatically injected into the appropriate <code>backends[...]</code> entry if not already specified, using a shared <code>BackendSettings</code> schema.</p> <p>Attributes:</p> Name Type Description <code>mongodb_uri</code> <code>Optional[str]</code> <p>MongoDB URI (shortcut).</p> <code>redis_uri</code> <code>Optional[str]</code> <p>Redis URI (shortcut).</p> <code>sql_uri</code> <code>Optional[str]</code> <p>SQLAlchemy URI (shortcut).</p> <code>backends</code> <code>Dict[str, BackendSettings]</code> <p>Full per-backend configurations.</p> Example <pre><code>database:\n  mongodb_uri: \"mongodb://localhost:27017/mydb\"\n  redis_uri: \"redis://localhost:6379\"\n  sql_uri: \"postgresql+asyncpg://localhost/mydb\"\n\n  backends:\n    sqlalchemy:\n      execution_options:\n        isolation_level: \"READ COMMITTED\"\n    redis:\n      socket_timeout: 3\n</code></pre> Source code in <code>papi/core/models/db/main.py</code> <pre><code>class DatabaseConfig(BaseModel):\n    \"\"\"\n    Database configuration supporting both simple and structured modes.\n\n    This model supports two ways to configure your database engines:\n\n    1. Simple Mode:\n        Use `mongodb_uri`, `sql_uri`, and `redis_uri` directly for quick setup.\n\n    2. Advanced Mode:\n        Use the `backends` field to provide per-backend configuration.\n\n    The simple URIs will be automatically injected into the appropriate\n    `backends[...]` entry if not already specified, using a shared `BackendSettings` schema.\n\n    Attributes:\n        mongodb_uri (Optional[str]): MongoDB URI (shortcut).\n        redis_uri (Optional[str]): Redis URI (shortcut).\n        sql_uri (Optional[str]): SQLAlchemy URI (shortcut).\n        backends (Dict[str, BackendSettings]): Full per-backend configurations.\n\n    Example:\n        ```yaml\n        database:\n          mongodb_uri: \"mongodb://localhost:27017/mydb\"\n          redis_uri: \"redis://localhost:6379\"\n          sql_uri: \"postgresql+asyncpg://localhost/mydb\"\n\n          backends:\n            sqlalchemy:\n              execution_options:\n                isolation_level: \"READ COMMITTED\"\n            redis:\n              socket_timeout: 3\n        ```\n    \"\"\"\n\n    mongodb_uri: Optional[str] = Field(default=None)\n    redis_uri: Optional[str] = Field(default=None)\n    sql_uri: Optional[str] = Field(default=None)\n\n    backends: Dict[str, BackendSettings] = Field(default_factory=dict)\n\n    @model_validator(mode=\"after\")\n    def hydrate_backends_with_uris(self) -&gt; \"DatabaseConfig\":\n        \"\"\"\n        Automatically populate backend configurations with URIs from top-level fields,\n        unless the URI is already specified in the `backends` dict.\n        \"\"\"\n        uri_map = {\n            \"mongodb_uri\": \"beanie\",\n            \"redis_uri\": \"redis\",\n            \"sql_uri\": \"sqlalchemy\",\n        }\n\n        for field_name, backend_key in uri_map.items():\n            uri_value = getattr(self, field_name)\n            if uri_value:\n                if backend_key not in self.backends:\n                    self.backends[backend_key] = BackendSettings(uri=uri_value)\n                elif \"url\" not in self.backends[backend_key].__dict__:\n                    # Inject uri into existing backend config if missing\n                    self.backends[backend_key].__dict__[\"url\"] = uri_value\n\n        return self\n\n    def get_backend_uri(self, backend: str) -&gt; Optional[str]:\n        \"\"\"\n        Returns the URI for a given backend, if available.\n\n        Args:\n            backend (str): The backend name (e.g., 'sqlalchemy', 'redis', 'beanie').\n\n        Returns:\n            Optional[str]: The URI or None.\n        \"\"\"\n        return self.backends.get(backend, BackendSettings(url=\"\")).url or None\n\n    def get_backend(self, backend: str) -&gt; Optional[BackendSettings]:\n        \"\"\"\n        Returns the backend, if available.\n\n        Args:\n            backend (str): The backend name (e.g., 'sqlalchemy', 'redis', 'beanie').\n\n        \"\"\"\n        return self.backends.get(backend, BackendSettings(url=\"\")) or None\n\n    @root_validator(pre=True)\n    def inject_simple_uris_into_backends(cls, values):\n        uri_mapping = {\n            \"mongodb_uri\": \"beanie\",\n            \"redis_uri\": \"redis\",\n            \"sql_uri\": \"sqlalchemy\",\n        }\n        backends = values.get(\"backends\", {})\n\n        for uri_field, backend_name in uri_mapping.items():\n            uri = values.get(uri_field)\n            if uri:\n                backends.setdefault(backend_name, {})  # create if not exists\n                backends[backend_name].setdefault(\"url\", uri)\n\n        # Instantiate backend config objects\n        values[\"backends\"] = {\n            name: load_backend_config(name, config) for name, config in backends.items()\n        }\n        return values\n\n    class Config:\n        extra = \"allow\"\n</code></pre>"},{"location":"reference/models/#papi.core.models.config.DatabaseConfig.get_backend","title":"<code>get_backend(backend)</code>","text":"<p>Returns the backend, if available.</p> <p>Parameters:</p> Name Type Description Default <code>backend</code> <code>str</code> <p>The backend name (e.g., 'sqlalchemy', 'redis', 'beanie').</p> required Source code in <code>papi/core/models/db/main.py</code> <pre><code>def get_backend(self, backend: str) -&gt; Optional[BackendSettings]:\n    \"\"\"\n    Returns the backend, if available.\n\n    Args:\n        backend (str): The backend name (e.g., 'sqlalchemy', 'redis', 'beanie').\n\n    \"\"\"\n    return self.backends.get(backend, BackendSettings(url=\"\")) or None\n</code></pre>"},{"location":"reference/models/#papi.core.models.config.DatabaseConfig.get_backend_uri","title":"<code>get_backend_uri(backend)</code>","text":"<p>Returns the URI for a given backend, if available.</p> <p>Parameters:</p> Name Type Description Default <code>backend</code> <code>str</code> <p>The backend name (e.g., 'sqlalchemy', 'redis', 'beanie').</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The URI or None.</p> Source code in <code>papi/core/models/db/main.py</code> <pre><code>def get_backend_uri(self, backend: str) -&gt; Optional[str]:\n    \"\"\"\n    Returns the URI for a given backend, if available.\n\n    Args:\n        backend (str): The backend name (e.g., 'sqlalchemy', 'redis', 'beanie').\n\n    Returns:\n        Optional[str]: The URI or None.\n    \"\"\"\n    return self.backends.get(backend, BackendSettings(url=\"\")).url or None\n</code></pre>"},{"location":"reference/models/#papi.core.models.config.DatabaseConfig.hydrate_backends_with_uris","title":"<code>hydrate_backends_with_uris()</code>","text":"<p>Automatically populate backend configurations with URIs from top-level fields, unless the URI is already specified in the <code>backends</code> dict.</p> Source code in <code>papi/core/models/db/main.py</code> <pre><code>@model_validator(mode=\"after\")\ndef hydrate_backends_with_uris(self) -&gt; \"DatabaseConfig\":\n    \"\"\"\n    Automatically populate backend configurations with URIs from top-level fields,\n    unless the URI is already specified in the `backends` dict.\n    \"\"\"\n    uri_map = {\n        \"mongodb_uri\": \"beanie\",\n        \"redis_uri\": \"redis\",\n        \"sql_uri\": \"sqlalchemy\",\n    }\n\n    for field_name, backend_key in uri_map.items():\n        uri_value = getattr(self, field_name)\n        if uri_value:\n            if backend_key not in self.backends:\n                self.backends[backend_key] = BackendSettings(uri=uri_value)\n            elif \"url\" not in self.backends[backend_key].__dict__:\n                # Inject uri into existing backend config if missing\n                self.backends[backend_key].__dict__[\"url\"] = uri_value\n\n    return self\n</code></pre>"},{"location":"reference/models/#papi.core.models.config.StorageConfig","title":"<code>StorageConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for storage backends. Extra fields are allowed and will be preserved.</p> Source code in <code>papi/core/models/config.py</code> <pre><code>class StorageConfig(BaseModel):\n    \"\"\"\n    Configuration for storage backends.\n    Extra fields are allowed and will be preserved.\n    \"\"\"\n\n    class Config:\n        extra = \"allow\"\n</code></pre>"},{"location":"reference/models/#papi.core.models.addons.AddonManifest","title":"<code>AddonManifest</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model representing the manifest file of a pAPI addon.</p> <p>This model is used to load and validate the configuration defined in a YAML file for a specific addon.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The internal name of the addon (derived from the directory name).</p> <code>title</code> <code>Optional[str]</code> <p>Human-readable title of the addon. Defaults to \"pAPI Addon\".</p> <code>version</code> <code>Optional[str]</code> <p>Version number of the addon. Defaults to \"0.1\".</p> <code>dependencies</code> <code>List[str]</code> <p>List of required addon identifiers this addon depends on.</p> <code>python_dependencies</code> <code>List[str]</code> <p>List of Python package dependencies required by the addon.</p> <code>authors</code> <code>Union[str, Sequence[str], None]</code> <p>Author name or list of authors.</p> <code>description</code> <code>Optional[str]</code> <p>Optional addon description.</p> <code>path</code> <code>Path</code> <p>Filesystem path to the addon directory (excluded from serialization).</p> Properties <p>addon_id (str): The unique ID of the addon, derived from the folder name.</p> Class Methods <p>from_yaml(path: Path) -&gt; AddonManifest:     Load an addon manifest from a YAML file.</p> Example <pre><code>from pathlib import Path\n\nmanifest = AddonManifest.from_yaml(Path(\"addons/image_storage/manifest.yaml\"))\nprint(manifest.title)  # \"pAPI Addon\" or custom title\nprint(manifest.addon_id)  # \"image_storage\"\n</code></pre> Source code in <code>papi/core/models/addons.py</code> <pre><code>class AddonManifest(BaseModel):\n    \"\"\"\n    Model representing the manifest file of a pAPI addon.\n\n    This model is used to load and validate the configuration defined in a YAML file for a specific addon.\n\n    Attributes:\n        name (str): The internal name of the addon (derived from the directory name).\n        title (Optional[str]): Human-readable title of the addon. Defaults to \"pAPI Addon\".\n        version (Optional[str]): Version number of the addon. Defaults to \"0.1\".\n        dependencies (List[str]): List of required addon identifiers this addon depends on.\n        python_dependencies (List[str]): List of Python package dependencies required by the addon.\n        authors (Union[str, Sequence[str], None]): Author name or list of authors.\n        description (Optional[str]): Optional addon description.\n        path (Path): Filesystem path to the addon directory (excluded from serialization).\n\n    Properties:\n        addon_id (str): The unique ID of the addon, derived from the folder name.\n\n    Class Methods:\n        from_yaml(path: Path) -&gt; AddonManifest:\n            Load an addon manifest from a YAML file.\n\n    Example:\n        ```python\n        from pathlib import Path\n\n        manifest = AddonManifest.from_yaml(Path(\"addons/image_storage/manifest.yaml\"))\n        print(manifest.title)  # \"pAPI Addon\" or custom title\n        print(manifest.addon_id)  # \"image_storage\"\n        ```\n    \"\"\"\n\n    name: str\n    title: str | None = \"pAPI Addon\"\n    version: str | None = \"0.1\"\n    dependencies: List[str] = Field(default_factory=list)\n    python_dependencies: List[str] = Field(default_factory=list)\n    authors: str | Sequence | None = None\n    description: Optional[str] = None\n    path: Path = Field(exclude=True)\n\n    @property\n    def addon_id(self) -&gt; str:\n        return self.path.parts[-1]\n\n    @classmethod\n    def from_yaml(cls, path: Path):\n        \"\"\"\n        Load an `AddonManifest` from a YAML file.\n\n        Args:\n            path (Path): Path to the `manifest.yaml` file.\n\n        Returns:\n            AddonManifest: An instance of the manifest model populated with data from the file.\n\n        Raises:\n            yaml.YAMLError: If the YAML is invalid or cannot be parsed.\n\n        Example:\n            Example `manifest.yaml` content:\n\n            ```yaml\n            name: custom addon\n            version: 0.0.1\n            description: My Custom API\n            author: My Self\n\n            dependencies:\n            - user_auth_system\n\n            python_dependencies:\n            - \"requests&gt;=2.28.0\"\n            ```\n\n            Usage:\n\n            ```python\n            from pathlib import Path\n            manifest = AddonManifest.from_yaml(Path(\"addons/custom_addon/manifest.yaml\"))\n            print(manifest.addon_id)  # custom_addon\n            print(manifest.name)  # custom_addon\n            print(manifest.version)  # 0.1\n            print(manifest.dependencies)  # ['user_auth_system']\n            print(manifest.python_dependencies)  # ['requests&gt;=2.28.0']\n            ```\n        \"\"\"\n        with open(path, \"r\", encoding=\"utf-8\") as f:\n            data = yaml.safe_load(f) or {}\n\n        addon_dir = path.parent\n        data[\"name\"] = addon_dir.name\n\n        return cls(**data, path=addon_dir)\n</code></pre>"},{"location":"reference/models/#papi.core.models.addons.AddonManifest.from_yaml","title":"<code>from_yaml(path)</code>  <code>classmethod</code>","text":"<p>Load an <code>AddonManifest</code> from a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Path to the <code>manifest.yaml</code> file.</p> required <p>Returns:</p> Name Type Description <code>AddonManifest</code> <p>An instance of the manifest model populated with data from the file.</p> <p>Raises:</p> Type Description <code>YAMLError</code> <p>If the YAML is invalid or cannot be parsed.</p> Example <p>Example <code>manifest.yaml</code> content:</p> <pre><code>name: custom addon\nversion: 0.0.1\ndescription: My Custom API\nauthor: My Self\n\ndependencies:\n- user_auth_system\n\npython_dependencies:\n- \"requests&gt;=2.28.0\"\n</code></pre> <p>Usage:</p> <pre><code>from pathlib import Path\nmanifest = AddonManifest.from_yaml(Path(\"addons/custom_addon/manifest.yaml\"))\nprint(manifest.addon_id)  # custom_addon\nprint(manifest.name)  # custom_addon\nprint(manifest.version)  # 0.1\nprint(manifest.dependencies)  # ['user_auth_system']\nprint(manifest.python_dependencies)  # ['requests&gt;=2.28.0']\n</code></pre> Source code in <code>papi/core/models/addons.py</code> <pre><code>@classmethod\ndef from_yaml(cls, path: Path):\n    \"\"\"\n    Load an `AddonManifest` from a YAML file.\n\n    Args:\n        path (Path): Path to the `manifest.yaml` file.\n\n    Returns:\n        AddonManifest: An instance of the manifest model populated with data from the file.\n\n    Raises:\n        yaml.YAMLError: If the YAML is invalid or cannot be parsed.\n\n    Example:\n        Example `manifest.yaml` content:\n\n        ```yaml\n        name: custom addon\n        version: 0.0.1\n        description: My Custom API\n        author: My Self\n\n        dependencies:\n        - user_auth_system\n\n        python_dependencies:\n        - \"requests&gt;=2.28.0\"\n        ```\n\n        Usage:\n\n        ```python\n        from pathlib import Path\n        manifest = AddonManifest.from_yaml(Path(\"addons/custom_addon/manifest.yaml\"))\n        print(manifest.addon_id)  # custom_addon\n        print(manifest.name)  # custom_addon\n        print(manifest.version)  # 0.1\n        print(manifest.dependencies)  # ['user_auth_system']\n        print(manifest.python_dependencies)  # ['requests&gt;=2.28.0']\n        ```\n    \"\"\"\n    with open(path, \"r\", encoding=\"utf-8\") as f:\n        data = yaml.safe_load(f) or {}\n\n    addon_dir = path.parent\n    data[\"name\"] = addon_dir.name\n\n    return cls(**data, path=addon_dir)\n</code></pre>"},{"location":"reference/models/#papi.core.models.response.Meta","title":"<code>Meta</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>papi/core/models/response.py</code> <pre><code>class Meta(BaseModel):\n    timestamp: str = Field(..., description=\"ISO 8601 timestamp of the response\")\n    requestId: str = Field(..., description=\"Unique request identifier\")\n</code></pre>"},{"location":"reference/models/#papi.core.models.response.APIError","title":"<code>APIError</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>papi/core/models/response.py</code> <pre><code>class APIError(BaseModel):\n    status_code: int = Field(..., description=\"HTTP status code of the error\")\n    detail: Optional[Any] = Field(\n        None, description=\"Additional details about the error\"\n    )\n    message: str = Field(\n        default=\"Internal server error\", description=\"Human-readable error message\"\n    )\n    code: str = Field(default=\"ERROR\", description=\"Custom application error code\")\n</code></pre>"},{"location":"reference/models/#papi.core.models.response.APIResponse","title":"<code>APIResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>papi/core/models/response.py</code> <pre><code>class APIResponse(BaseModel):\n    success: bool = Field(\n        ..., description=\"Indicates whether the request was successful\"\n    )\n    message: Optional[str] = Field(None, description=\"Optional message for the client\")\n    data: Optional[Any] = Field(None, description=\"Returned data if success is True\")\n    error: Optional[APIError] = Field(\n        None, description=\"Error information if success is False\"\n    )\n    meta: Meta = Field(..., description=\"Metadata for the response\")\n</code></pre>"},{"location":"reference/router/","title":"<code>papi.core.router</code>","text":""},{"location":"reference/router/#papi.core.router.RESTRouter","title":"<code>RESTRouter</code>","text":"<p>               Bases: <code>APIRouter</code></p> <p>Enhanced FastAPI router with Model Context Protocol (MCP) integration and Addon Platform support.</p> <p>Key Features: - Dual Registration System: Expose routes as both HTTP endpoints and MCP tools - Addon-Friendly Architecture: Safe route overriding with schema preservation - Protocol Bridging: Native integration between REST APIs and AI agent workflows - Metadata Enrichment: Attach MCP-specific context to standard API routes</p> Implementation Highlights <ol> <li> <p>MCP Tool Exposure:</p> <ul> <li>Routes can be registered as executable tools in AI workflows via <code>expose_as_mcp_tool=True</code></li> <li>Automatic schema generation for tool discovery and orchestration, provided by fastMCP   Framework, please visit the FastMCP documentation.</li> </ul> </li> <li> <p>Addon Platform Support:</p> <ul> <li>Global route registry enables safe cross-addon overrides</li> <li>Version-aware route resolution maintains OpenAPI schema integrity</li> <li>Conflict detection for path/method combinations across modules</li> </ul> </li> <li> <p>Extended Routing Capabilities:</p> <ul> <li>Maintains native FastAPI behavior for unmodified endpoints</li> <li>Method override protection through route signature tracking</li> <li>Dual registration system (HTTP + MCP) without side effects</li> </ul> </li> </ol> <p>Usage Example: <pre><code>    @router.get(\"/text-get\", expose_as_mcp_tool=True)\n    @router.put(\"/text-put\", expose_as_mcp_tool=True)\n    @router.post(\"/text-post\", expose_as_mcp_tool=True)\n    @router.delete(\"/text-delete\", expose_as_mcp_tool=True)\n    @router.patch(\"/text-patch\", expose_as_mcp_tool=True)\n    async def route_implementation():\n        # expose the route_implementation as API route\n        # and create the route_implementation MCP tool\n        ...\n</code></pre></p> Source code in <code>papi/core/router.py</code> <pre><code>class RESTRouter(FastAPIRouter):\n    \"\"\"\n    Enhanced FastAPI router with Model Context Protocol (MCP) integration and Addon Platform support.\n\n    Key Features:\n    - Dual Registration System: Expose routes as both HTTP endpoints and MCP tools\n    - Addon-Friendly Architecture: Safe route overriding with schema preservation\n    - Protocol Bridging: Native integration between REST APIs and AI agent workflows\n    - Metadata Enrichment: Attach MCP-specific context to standard API routes\n\n    Implementation Highlights:\n        1. MCP Tool Exposure:\n            - Routes can be registered as executable tools in AI workflows via `expose_as_mcp_tool=True`\n            - Automatic schema generation for tool discovery and orchestration, provided by fastMCP\n              Framework, please visit the FastMCP documentation.\n\n        2. Addon Platform Support:\n            - Global route registry enables safe cross-addon overrides\n            - Version-aware route resolution maintains OpenAPI schema integrity\n            - Conflict detection for path/method combinations across modules\n\n        3. Extended Routing Capabilities:\n            - Maintains native FastAPI behavior for unmodified endpoints\n            - Method override protection through route signature tracking\n            - Dual registration system (HTTP + MCP) without side effects\n\n    Usage Example:\n    ```python\n        @router.get(\"/text-get\", expose_as_mcp_tool=True)\n        @router.put(\"/text-put\", expose_as_mcp_tool=True)\n        @router.post(\"/text-post\", expose_as_mcp_tool=True)\n        @router.delete(\"/text-delete\", expose_as_mcp_tool=True)\n        @router.patch(\"/text-patch\", expose_as_mcp_tool=True)\n        async def route_implementation():\n            # expose the route_implementation as API route\n            # and create the route_implementation MCP tool\n            ...\n    ```\n    \"\"\"\n\n    routes_map: Dict[str, APIRoute]\n    routes: Sequence[APIRoute]\n\n    def __hash__(self):\n        return hash(id(self))\n\n    def __eq__(self, other):\n        return self is other\n\n    def __init__(\n        self,\n        *,\n        prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to all the *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to all the\n                *path operations* in this router.\n\n                Read more about it in the\n                [FastAPI docs for Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        default_response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                The default response class to be used.\n\n                Read more in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses to be shown in OpenAPI.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Additional Responses in OpenAPI](https://fastapi.tiangolo.com/advanced/additional-responses/).\n\n                And in the\n                [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                OpenAPI callbacks that should apply to all *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        routes: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                **Note**: you probably shouldn't use this parameter, it is inherited\n                from Starlette and supported for compatibility.\n\n                ---\n\n                A list of routes to serve incoming HTTP and WebSocket requests.\n                \"\"\"\n            ),\n            deprecated(\n                \"\"\"\n                You normally wouldn't use this parameter with FastAPI, it is inherited\n                from Starlette and supported for compatibility.\n\n                In FastAPI, you normally would use the *path operation methods*,\n                like `router.get()`, `router.post()`, etc.\n                \"\"\"\n            ),\n        ] = None,\n        redirect_slashes: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Whether to detect and redirect slashes in URLs when the client doesn't\n                use the same format.\n                \"\"\"\n            ),\n        ] = True,\n        default: Annotated[\n            Optional[ASGIApp],\n            Doc(\n                \"\"\"\n                Default function handler for this router. Used to handle\n                404 Not Found errors.\n                \"\"\"\n            ),\n        ] = None,\n        dependency_overrides_provider: Annotated[\n            Optional[Any],\n            Doc(\n                \"\"\"\n                Only used internally by FastAPI to handle dependency overrides.\n\n                You shouldn't need to use it. It normally points to the `FastAPI` app\n                object.\n                \"\"\"\n            ),\n        ] = None,\n        route_class: Annotated[\n            Type[APIRoute],\n            Doc(\n                \"\"\"\n                Custom route (*path operation*) class to be used by this router.\n\n                Read more about it in the\n                [FastAPI docs for Custom Request and APIRoute class](https://fastapi.tiangolo.com/how-to/custom-request-and-route/#custom-apiroute-class-in-a-router).\n                \"\"\"\n            ),\n        ] = APIRoute,\n        on_startup: Annotated[\n            Optional[Sequence[Callable[[], Any]]],\n            Doc(\n                \"\"\"\n                A list of startup event handler functions.\n\n                You should instead use the `lifespan` handlers.\n\n                Read more in the [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        on_shutdown: Annotated[\n            Optional[Sequence[Callable[[], Any]]],\n            Doc(\n                \"\"\"\n                A list of shutdown event handler functions.\n\n                You should instead use the `lifespan` handlers.\n\n                Read more in the\n                [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        # the generic to Lifespan[AppType] is the type of the top level application\n        # which the router cannot know statically, so we use typing.Any\n        lifespan: Annotated[\n            Optional[Lifespan[Any]],\n            Doc(\n                \"\"\"\n                A `Lifespan` context manager handler. This replaces `startup` and\n                `shutdown` functions with a single context manager.\n\n                Read more in the\n                [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark all *path operations* in this router as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                To include (or not) all the *path operations* in this router in the\n                generated OpenAPI.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -&gt; None:\n        self.routes_map = {}\n        super().__init__(\n            prefix=prefix,\n            tags=tags,\n            dependencies=dependencies,\n            default_response_class=default_response_class,\n            responses=responses,\n            callbacks=callbacks,\n            routes=routes,\n            redirect_slashes=redirect_slashes,\n            default=default,\n            dependency_overrides_provider=dependency_overrides_provider,\n            route_class=route_class,\n            on_startup=on_startup,\n            on_shutdown=on_shutdown,\n            lifespan=lifespan,\n            deprecated=deprecated,\n            include_in_schema=include_in_schema,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def add_api_route(self, *args, **kwargs) -&gt; None:\n        \"\"\"\n        Add a new API route with optional MCP tool exposure flag.\n\n        This method extends the default FastAPI `add_api_route` by allowing the use\n        of a custom `expose_as_mcp_tool` keyword argument. If set to `True`, the route\n        will be marked as part of the Model Context Protocol (MCP) tooling system.\n\n        Parameters:\n            *args: Positional arguments passed directly to `add_api_route`.\n            **kwargs: Keyword arguments passed directly to `add_api_route`.\n                - expose_as_mcp_tool (bool, optional): If True, marks the route\n                as part of the MCP tool interface. This flag is removed from\n                kwargs before being passed to the base method.\n\n        Behavior:\n            - Delegates route creation to the superclass.\n            - Attaches the `is_mcp_tool` attribute to the most recently added route.\n\n        Example:\n            @router.get(\"/my-tool\", expose_as_mcp_tool=True)\n            async def my_tool(): ...\n\n        \"\"\"\n        is_mcp_tool_route = kwargs.pop(\"expose_as_mcp_tool\", False)\n        super().add_api_route(*args, **kwargs)\n        last_route_added = self.routes[-1]\n        last_route_added.is_mcp_tool = is_mcp_tool_route\n        if last_route_added.path in self.routes_map:\n            logger.warning(\n                f\"Route [{', '.join(last_route_added.methods)}] {last_route_added.path} was overwritten: \"\n                f\"from: {self.routes_map[last_route_added.path].endpoint.__module__}:{self.routes_map[last_route_added.path].endpoint.__name__} -&gt; \"\n                f\"to: {last_route_added.endpoint.__module__}:{last_route_added.endpoint.__name__}\"\n            )\n        self.routes_map[\n            f\"{','.join(last_route_added.methods)}_{last_route_added.path}\"\n        ] = last_route_added\n        self.routes = list(self.routes_map.values())\n\n    def api_route(\n        self, path: str, *args, **kwargs\n    ) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Override FastAPI's api_route to support `expose_as_mcp_tool`.\n\n        The `expose_as_mcp_tool` flag marks the route as part of the Model Context Protocol.\n        \"\"\"\n\n        def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n            self.add_api_route(path, func, *args, **kwargs)\n            return func\n\n        return decorator\n\n    def get(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n        expose_as_mcp_tool: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                If True, this route is exposed as a Model Context Protocol (MCP) tool\n                using the fastmcp framework.\n                \"\"\"\n            ),\n        ] = False,\n    ) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP GET operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n\n        app = FastAPI()\n        router = APIRouter()\n\n\n        @router.get(\"/items/\")\n        def read_items():\n            return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\n\n        app.include_router(router)\n        ```\n        \"\"\"\n\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"GET\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n            expose_as_mcp_tool=expose_as_mcp_tool,\n        )\n\n    def put(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n        expose_as_mcp_tool: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                If True, this route is exposed as a Model Context Protocol (MCP) tool\n                using the fastmcp framework.\n                \"\"\"\n            ),\n        ] = False,\n    ) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP PUT operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n        from pydantic import BaseModel\n\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n\n        app = FastAPI()\n        router = APIRouter()\n\n\n        @router.put(\"/items/{item_id}\")\n        def replace_item(item_id: str, item: Item):\n            return {\"message\": \"Item replaced\", \"id\": item_id}\n\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"PUT\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n            expose_as_mcp_tool=expose_as_mcp_tool,\n        )\n\n    def post(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n        expose_as_mcp_tool: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                If True, this route is exposed as a Model Context Protocol (MCP) tool\n                using the fastmcp framework.\n                \"\"\"\n            ),\n        ] = False,\n    ) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP POST operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n        from pydantic import BaseModel\n\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n\n        app = FastAPI()\n        router = APIRouter()\n\n\n        @router.post(\"/items/\")\n        def create_item(item: Item):\n            return {\"message\": \"Item created\"}\n\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"POST\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n            expose_as_mcp_tool=expose_as_mcp_tool,\n        )\n\n    def delete(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n        expose_as_mcp_tool: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                If True, this route is exposed as a Model Context Protocol (MCP) tool\n                using the fastmcp framework.\n                \"\"\"\n            ),\n        ] = False,\n    ) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP DELETE operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n\n        app = FastAPI()\n        router = APIRouter()\n\n\n        @router.delete(\"/items/{item_id}\")\n        def delete_item(item_id: str):\n            return {\"message\": \"Item deleted\"}\n\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"DELETE\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n            expose_as_mcp_tool=expose_as_mcp_tool,\n        )\n\n    def patch(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n        expose_as_mcp_tool: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                If True, this route is exposed as a Model Context Protocol (MCP) tool\n                using the fastmcp framework.\n                \"\"\"\n            ),\n        ] = False,\n    ) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP PATCH operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n        from pydantic import BaseModel\n\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n\n        app = FastAPI()\n        router = APIRouter()\n\n\n        @router.patch(\"/items/\")\n        def update_item(item: Item):\n            return {\"message\": \"Item updated in place\"}\n\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"PATCH\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n            expose_as_mcp_tool=expose_as_mcp_tool,\n        )\n\n    def http(self, *args, **kwargs):\n        \"\"\"\n        Alias for `.get(..., include_in_schema=False)`.\n\n        Behaves exactly like `.get()` but excluded from OpenAPI docs by default.\n        \"\"\"\n\n        return self.get(include_in_schema=False, *args, **kwargs)\n</code></pre>"},{"location":"reference/router/#papi.core.router.RESTRouter.add_api_route","title":"<code>add_api_route(*args, **kwargs)</code>","text":"<p>Add a new API route with optional MCP tool exposure flag.</p> <p>This method extends the default FastAPI <code>add_api_route</code> by allowing the use of a custom <code>expose_as_mcp_tool</code> keyword argument. If set to <code>True</code>, the route will be marked as part of the Model Context Protocol (MCP) tooling system.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Positional arguments passed directly to <code>add_api_route</code>.</p> <code>()</code> <code>**kwargs</code> <p>Keyword arguments passed directly to <code>add_api_route</code>. - expose_as_mcp_tool (bool, optional): If True, marks the route as part of the MCP tool interface. This flag is removed from kwargs before being passed to the base method.</p> <code>{}</code> Behavior <ul> <li>Delegates route creation to the superclass.</li> <li>Attaches the <code>is_mcp_tool</code> attribute to the most recently added route.</li> </ul> Example <p>@router.get(\"/my-tool\", expose_as_mcp_tool=True) async def my_tool(): ...</p> Source code in <code>papi/core/router.py</code> <pre><code>def add_api_route(self, *args, **kwargs) -&gt; None:\n    \"\"\"\n    Add a new API route with optional MCP tool exposure flag.\n\n    This method extends the default FastAPI `add_api_route` by allowing the use\n    of a custom `expose_as_mcp_tool` keyword argument. If set to `True`, the route\n    will be marked as part of the Model Context Protocol (MCP) tooling system.\n\n    Parameters:\n        *args: Positional arguments passed directly to `add_api_route`.\n        **kwargs: Keyword arguments passed directly to `add_api_route`.\n            - expose_as_mcp_tool (bool, optional): If True, marks the route\n            as part of the MCP tool interface. This flag is removed from\n            kwargs before being passed to the base method.\n\n    Behavior:\n        - Delegates route creation to the superclass.\n        - Attaches the `is_mcp_tool` attribute to the most recently added route.\n\n    Example:\n        @router.get(\"/my-tool\", expose_as_mcp_tool=True)\n        async def my_tool(): ...\n\n    \"\"\"\n    is_mcp_tool_route = kwargs.pop(\"expose_as_mcp_tool\", False)\n    super().add_api_route(*args, **kwargs)\n    last_route_added = self.routes[-1]\n    last_route_added.is_mcp_tool = is_mcp_tool_route\n    if last_route_added.path in self.routes_map:\n        logger.warning(\n            f\"Route [{', '.join(last_route_added.methods)}] {last_route_added.path} was overwritten: \"\n            f\"from: {self.routes_map[last_route_added.path].endpoint.__module__}:{self.routes_map[last_route_added.path].endpoint.__name__} -&gt; \"\n            f\"to: {last_route_added.endpoint.__module__}:{last_route_added.endpoint.__name__}\"\n        )\n    self.routes_map[\n        f\"{','.join(last_route_added.methods)}_{last_route_added.path}\"\n    ] = last_route_added\n    self.routes = list(self.routes_map.values())\n</code></pre>"},{"location":"reference/router/#papi.core.router.RESTRouter.api_route","title":"<code>api_route(path, *args, **kwargs)</code>","text":"<p>Override FastAPI's api_route to support <code>expose_as_mcp_tool</code>.</p> <p>The <code>expose_as_mcp_tool</code> flag marks the route as part of the Model Context Protocol.</p> Source code in <code>papi/core/router.py</code> <pre><code>def api_route(\n    self, path: str, *args, **kwargs\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Override FastAPI's api_route to support `expose_as_mcp_tool`.\n\n    The `expose_as_mcp_tool` flag marks the route as part of the Model Context Protocol.\n    \"\"\"\n\n    def decorator(func: DecoratedCallable) -&gt; DecoratedCallable:\n        self.add_api_route(path, func, *args, **kwargs)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"reference/router/#papi.core.router.RESTRouter.delete","title":"<code>delete(path, *, response_model=Default(None), status_code=None, tags=None, dependencies=None, summary=None, description=None, response_description='Successful Response', responses=None, deprecated=None, operation_id=None, response_model_include=None, response_model_exclude=None, response_model_by_alias=True, response_model_exclude_unset=False, response_model_exclude_defaults=False, response_model_exclude_none=False, include_in_schema=True, response_class=Default(JSONResponse), name=None, callbacks=None, openapi_extra=None, generate_unique_id_function=Default(generate_unique_id), expose_as_mcp_tool=False)</code>","text":"<p>Add a path operation using an HTTP DELETE operation.</p>"},{"location":"reference/router/#papi.core.router.RESTRouter.delete--example","title":"Example","text":"<pre><code>from fastapi import APIRouter, FastAPI\n\napp = FastAPI()\nrouter = APIRouter()\n\n\n@router.delete(\"/items/{item_id}\")\ndef delete_item(item_id: str):\n    return {\"message\": \"Item deleted\"}\n\n\napp.include_router(router)\n</code></pre> Source code in <code>papi/core/router.py</code> <pre><code>def delete(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, FastAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `FastAPI` class.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n    expose_as_mcp_tool: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            If True, this route is exposed as a Model Context Protocol (MCP) tool\n            using the fastmcp framework.\n            \"\"\"\n        ),\n    ] = False,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP DELETE operation.\n\n    ## Example\n\n    ```python\n    from fastapi import APIRouter, FastAPI\n\n    app = FastAPI()\n    router = APIRouter()\n\n\n    @router.delete(\"/items/{item_id}\")\n    def delete_item(item_id: str):\n        return {\"message\": \"Item deleted\"}\n\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"DELETE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n        expose_as_mcp_tool=expose_as_mcp_tool,\n    )\n</code></pre>"},{"location":"reference/router/#papi.core.router.RESTRouter.get","title":"<code>get(path, *, response_model=Default(None), status_code=None, tags=None, dependencies=None, summary=None, description=None, response_description='Successful Response', responses=None, deprecated=None, operation_id=None, response_model_include=None, response_model_exclude=None, response_model_by_alias=True, response_model_exclude_unset=False, response_model_exclude_defaults=False, response_model_exclude_none=False, include_in_schema=True, response_class=Default(JSONResponse), name=None, callbacks=None, openapi_extra=None, generate_unique_id_function=Default(generate_unique_id), expose_as_mcp_tool=False)</code>","text":"<p>Add a path operation using an HTTP GET operation.</p>"},{"location":"reference/router/#papi.core.router.RESTRouter.get--example","title":"Example","text":"<pre><code>from fastapi import APIRouter, FastAPI\n\napp = FastAPI()\nrouter = APIRouter()\n\n\n@router.get(\"/items/\")\ndef read_items():\n    return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\n\napp.include_router(router)\n</code></pre> Source code in <code>papi/core/router.py</code> <pre><code>def get(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, FastAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `FastAPI` class.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n    expose_as_mcp_tool: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            If True, this route is exposed as a Model Context Protocol (MCP) tool\n            using the fastmcp framework.\n            \"\"\"\n        ),\n    ] = False,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP GET operation.\n\n    ## Example\n\n    ```python\n    from fastapi import APIRouter, FastAPI\n\n    app = FastAPI()\n    router = APIRouter()\n\n\n    @router.get(\"/items/\")\n    def read_items():\n        return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\n\n    app.include_router(router)\n    ```\n    \"\"\"\n\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"GET\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n        expose_as_mcp_tool=expose_as_mcp_tool,\n    )\n</code></pre>"},{"location":"reference/router/#papi.core.router.RESTRouter.http","title":"<code>http(*args, **kwargs)</code>","text":"<p>Alias for <code>.get(..., include_in_schema=False)</code>.</p> <p>Behaves exactly like <code>.get()</code> but excluded from OpenAPI docs by default.</p> Source code in <code>papi/core/router.py</code> <pre><code>def http(self, *args, **kwargs):\n    \"\"\"\n    Alias for `.get(..., include_in_schema=False)`.\n\n    Behaves exactly like `.get()` but excluded from OpenAPI docs by default.\n    \"\"\"\n\n    return self.get(include_in_schema=False, *args, **kwargs)\n</code></pre>"},{"location":"reference/router/#papi.core.router.RESTRouter.patch","title":"<code>patch(path, *, response_model=Default(None), status_code=None, tags=None, dependencies=None, summary=None, description=None, response_description='Successful Response', responses=None, deprecated=None, operation_id=None, response_model_include=None, response_model_exclude=None, response_model_by_alias=True, response_model_exclude_unset=False, response_model_exclude_defaults=False, response_model_exclude_none=False, include_in_schema=True, response_class=Default(JSONResponse), name=None, callbacks=None, openapi_extra=None, generate_unique_id_function=Default(generate_unique_id), expose_as_mcp_tool=False)</code>","text":"<p>Add a path operation using an HTTP PATCH operation.</p>"},{"location":"reference/router/#papi.core.router.RESTRouter.patch--example","title":"Example","text":"<pre><code>from fastapi import APIRouter, FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = FastAPI()\nrouter = APIRouter()\n\n\n@router.patch(\"/items/\")\ndef update_item(item: Item):\n    return {\"message\": \"Item updated in place\"}\n\n\napp.include_router(router)\n</code></pre> Source code in <code>papi/core/router.py</code> <pre><code>def patch(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, FastAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `FastAPI` class.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n    expose_as_mcp_tool: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            If True, this route is exposed as a Model Context Protocol (MCP) tool\n            using the fastmcp framework.\n            \"\"\"\n        ),\n    ] = False,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PATCH operation.\n\n    ## Example\n\n    ```python\n    from fastapi import APIRouter, FastAPI\n    from pydantic import BaseModel\n\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n\n    app = FastAPI()\n    router = APIRouter()\n\n\n    @router.patch(\"/items/\")\n    def update_item(item: Item):\n        return {\"message\": \"Item updated in place\"}\n\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"PATCH\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n        expose_as_mcp_tool=expose_as_mcp_tool,\n    )\n</code></pre>"},{"location":"reference/router/#papi.core.router.RESTRouter.post","title":"<code>post(path, *, response_model=Default(None), status_code=None, tags=None, dependencies=None, summary=None, description=None, response_description='Successful Response', responses=None, deprecated=None, operation_id=None, response_model_include=None, response_model_exclude=None, response_model_by_alias=True, response_model_exclude_unset=False, response_model_exclude_defaults=False, response_model_exclude_none=False, include_in_schema=True, response_class=Default(JSONResponse), name=None, callbacks=None, openapi_extra=None, generate_unique_id_function=Default(generate_unique_id), expose_as_mcp_tool=False)</code>","text":"<p>Add a path operation using an HTTP POST operation.</p>"},{"location":"reference/router/#papi.core.router.RESTRouter.post--example","title":"Example","text":"<pre><code>from fastapi import APIRouter, FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = FastAPI()\nrouter = APIRouter()\n\n\n@router.post(\"/items/\")\ndef create_item(item: Item):\n    return {\"message\": \"Item created\"}\n\n\napp.include_router(router)\n</code></pre> Source code in <code>papi/core/router.py</code> <pre><code>def post(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, FastAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `FastAPI` class.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n    expose_as_mcp_tool: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            If True, this route is exposed as a Model Context Protocol (MCP) tool\n            using the fastmcp framework.\n            \"\"\"\n        ),\n    ] = False,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP POST operation.\n\n    ## Example\n\n    ```python\n    from fastapi import APIRouter, FastAPI\n    from pydantic import BaseModel\n\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n\n    app = FastAPI()\n    router = APIRouter()\n\n\n    @router.post(\"/items/\")\n    def create_item(item: Item):\n        return {\"message\": \"Item created\"}\n\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"POST\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n        expose_as_mcp_tool=expose_as_mcp_tool,\n    )\n</code></pre>"},{"location":"reference/router/#papi.core.router.RESTRouter.put","title":"<code>put(path, *, response_model=Default(None), status_code=None, tags=None, dependencies=None, summary=None, description=None, response_description='Successful Response', responses=None, deprecated=None, operation_id=None, response_model_include=None, response_model_exclude=None, response_model_by_alias=True, response_model_exclude_unset=False, response_model_exclude_defaults=False, response_model_exclude_none=False, include_in_schema=True, response_class=Default(JSONResponse), name=None, callbacks=None, openapi_extra=None, generate_unique_id_function=Default(generate_unique_id), expose_as_mcp_tool=False)</code>","text":"<p>Add a path operation using an HTTP PUT operation.</p>"},{"location":"reference/router/#papi.core.router.RESTRouter.put--example","title":"Example","text":"<pre><code>from fastapi import APIRouter, FastAPI\nfrom pydantic import BaseModel\n\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n\n\napp = FastAPI()\nrouter = APIRouter()\n\n\n@router.put(\"/items/{item_id}\")\ndef replace_item(item_id: str, item: Item):\n    return {\"message\": \"Item replaced\", \"id\": item_id}\n\n\napp.include_router(router)\n</code></pre> Source code in <code>papi/core/router.py</code> <pre><code>def put(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, FastAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = Default(None),\n    status_code: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        Optional[List[Union[str, Enum]]],\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Optional[Sequence[params.Depends]],\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        Optional[Dict[Union[int, str], Dict[str, Any]]],\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Optional[bool],\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `FastAPI` class.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        Type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = Default(JSONResponse),\n    name: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        Optional[List[BaseRoute]],\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = Default(generate_unique_id),\n    expose_as_mcp_tool: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            If True, this route is exposed as a Model Context Protocol (MCP) tool\n            using the fastmcp framework.\n            \"\"\"\n        ),\n    ] = False,\n) -&gt; Callable[[DecoratedCallable], DecoratedCallable]:\n    \"\"\"\n    Add a *path operation* using an HTTP PUT operation.\n\n    ## Example\n\n    ```python\n    from fastapi import APIRouter, FastAPI\n    from pydantic import BaseModel\n\n\n    class Item(BaseModel):\n        name: str\n        description: str | None = None\n\n\n    app = FastAPI()\n    router = APIRouter()\n\n\n    @router.put(\"/items/{item_id}\")\n    def replace_item(item_id: str, item: Item):\n        return {\"message\": \"Item replaced\", \"id\": item_id}\n\n\n    app.include_router(router)\n    ```\n    \"\"\"\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags,\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses,\n        deprecated=deprecated,\n        methods=[\"PUT\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=response_model_exclude_unset,\n        response_model_exclude_defaults=response_model_exclude_defaults,\n        response_model_exclude_none=response_model_exclude_none,\n        include_in_schema=include_in_schema,\n        response_class=response_class,\n        name=name,\n        callbacks=callbacks,\n        openapi_extra=openapi_extra,\n        generate_unique_id_function=generate_unique_id_function,\n        expose_as_mcp_tool=expose_as_mcp_tool,\n    )\n</code></pre>"},{"location":"reference/settings/","title":"<code>papi.core.settings</code>","text":""},{"location":"reference/settings/#papi.core.settings.get_config","title":"<code>get_config(config_file_path=None)</code>","text":"<p>Load and cache the application configuration from a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>config_file_path</code> <code>Optional[str]</code> <p>Path to the configuration file. If not provided, uses cached path or defaults to 'config.yaml'.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>AppConfig</code> <code>AppConfig</code> <p>The loaded configuration object.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified config file does not exist.</p> <code>YAMLError</code> <p>If the file cannot be parsed as valid YAML.</p> <code>Exception</code> <p>If the data cannot be converted into an AppConfig.</p> Source code in <code>papi/core/settings.py</code> <pre><code>def get_config(config_file_path: Optional[str] = None) -&gt; AppConfig:\n    \"\"\"\n    Load and cache the application configuration from a YAML file.\n\n    Args:\n        config_file_path (Optional[str]): Path to the configuration file.\n            If not provided, uses cached path or defaults to 'config.yaml'.\n\n    Returns:\n        AppConfig: The loaded configuration object.\n\n    Raises:\n        FileNotFoundError: If the specified config file does not exist.\n        yaml.YAMLError: If the file cannot be parsed as valid YAML.\n        Exception: If the data cannot be converted into an AppConfig.\n    \"\"\"\n    global _config_cache, _config_file_path\n\n    logger.debug(\"=== get_config() called ===\")\n    logger.debug(f\"Received config_file_path: {config_file_path}\")\n    logger.debug(f\"Current cached _config_file_path: {_config_file_path}\")\n    logger.debug(f\"Config cache status: {'filled' if _config_cache else 'empty'}\")\n\n    if _config_cache is not None and config_file_path is None:\n        logger.debug(\"Returning cached configuration object.\")\n        return _config_cache\n\n    # Determine the effective configuration file path\n    if config_file_path:\n        requested_path = Path(config_file_path).resolve()\n        _config_file_path = str(requested_path)\n    elif _config_file_path:\n        requested_path = Path(_config_file_path).resolve()\n    else:\n        requested_path = Path(\"config.yaml\").resolve()\n        _config_file_path = str(requested_path)\n\n    logger.info(f\"Loading configuration file from: {requested_path}\")\n\n    if not requested_path.is_file():\n        logger.error(f\"Configuration file not found: {requested_path}\")\n        raise FileNotFoundError(f\"Configuration file not found: {requested_path}\")\n\n    try:\n        with requested_path.open(\"r\", encoding=\"utf-8\") as f:\n            data = yaml.safe_load(f)\n        _config_cache = AppConfig(**data)\n        logger.debug(\"Configuration file successfully parsed and cached.\")\n    except yaml.YAMLError:\n        logger.exception(\"Failed to parse YAML configuration file.\")\n        raise\n    except Exception:\n        logger.exception(\"Failed to load configuration into AppConfig.\")\n        raise\n\n    return _config_cache\n</code></pre>"},{"location":"tutorials/hello_world/","title":"Your first Addon","text":""},{"location":"tutorials/hello_world/#hello-world","title":"\ud83d\ude80 Hello World!","text":"<p>pAPI is built around the concept of addons\u2014self-contained Python modules that define routes, models, CLI commands, and business logic. Creating your first addon is straightforward and does not require modifying the core system.</p>"},{"location":"tutorials/hello_world/#1-create-your-addon-structure","title":"1\ufe0f\u20e3 Create Your Addon Structure","text":"<p>In your configured <code>extra_addons_path</code> (e.g., <code>my_addons/</code>), create a new folder:</p> <pre><code>my_addons/\n\u2514\u2500\u2500 hello_world/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 manifest.yaml\n    \u2514\u2500\u2500 routers.py\n</code></pre>"},{"location":"tutorials/hello_world/#2-define-the-manifestyaml","title":"2\ufe0f\u20e3 Define the <code>manifest.yaml</code>","text":"<p>This file provides metadata and optional dependencies. At a minimum, define <code>name</code> and <code>version</code>:</p> <pre><code>name: hello_world\nversion: 0.1.0\ndescription: A minimal addon that says hello\nauthor: Your Name\n</code></pre>"},{"location":"tutorials/hello_world/#3-add-routes-with-restrouter","title":"3\ufe0f\u20e3 Add Routes with <code>RESTRouter</code>","text":"<p>In <code>routers.py</code>, use the <code>RESTRouter</code> class and <code>create_response()</code> helper to define a basic endpoint:</p> <pre><code>from papi.core.router import RESTRouter\nfrom papi.core.response import create_response\n\nrouter = RESTRouter()\n\n@router.get(\"/hello\")\nasync def hello():\n    return create_response(data={\"message\": \"Hello from addon!\"})\n</code></pre> <p>Then, import the router in <code>__init__.py</code> to ensure it is discovered automatically:</p> <pre><code>from .routers import router\n</code></pre>"},{"location":"tutorials/hello_world/#4-enable-your-addon-in-configyaml","title":"4\ufe0f\u20e3 Enable Your Addon in <code>config.yaml</code>","text":"<p>Add your addon to the global configuration file:</p> <pre><code>logger:\n  level: \"INFO\"\n  log_file: ./papi.log\n\ninfo:\n  title: \"Testing API Server\"\n  version: \"1.0.0\"\n  description: \"This is a test API server for demonstration purposes.\"\n\nserver:\n  host: \"127.0.0.1\"\n  port: 8080\n\naddons:\n  extra_addons_path: \"my_addons\"\n  enabled:\n    - hello_world\n</code></pre>"},{"location":"tutorials/hello_world/#5-run-the-server-and-test","title":"5\ufe0f\u20e3 Run the Server and Test","text":"<p>Start the server with:</p> <pre><code>rye run python papi/cli.py webserver\n</code></pre> <p>Then access your new endpoint at: <code>http://localhost:8080/hello</code></p> <p>Or test via <code>curl</code>:</p> <pre><code>curl -X GET http://localhost:8080/hello -H \"accept: application/json\"\n</code></pre> <p>Expected response:</p> <pre><code>{\n  \"success\": true,\n  \"message\": null,\n  \"data\": {\n    \"message\": \"Hello from addon!\"\n  },\n  \"error\": null,\n  \"meta\": {\n    \"timestamp\": \"2025-06-14T15:41:44+00:00\",\n    \"requestId\": \"207567c1-00b6-4b9b-8962-4e90b9a87beb\"\n  }\n}\n</code></pre> <p>Swagger docs are available at: \ud83d\udd17 http://localhost:8080/docs</p> <p>\ud83d\udca1 What happens behind the scenes?</p> <ul> <li>The addon is discovered and loaded automatically</li> <li>All <code>RESTRouter</code> routes are registered under the main router</li> <li>The addon is fully integrated into the routing and dependency system</li> </ul>"},{"location":"tutorials/hello_world/#whats-next","title":"\u2705 What's Next?","text":"<ul> <li>Implement <code>AddonSetupHook</code> for custom startup logic</li> </ul>"},{"location":"tutorials/hello_world_2/","title":"Addon Life cycle","text":""},{"location":"tutorials/hello_world_2/#extending-your-addon-lifecycle-hooks-with-addonsetuphook","title":"\ud83d\ude80 Extending Your Addon: Lifecycle Hooks with AddonSetupHook","text":"<p>Let\u2019s continue working on our <code>hello_world</code> addon to demonstrate how to define custom behaviors during the addon lifecycle. When pAPI discovers an addon, you can control its startup and shutdown phases. This is especially useful when you need to perform certain actions before the system starts, or just before it shuts down.</p> <p>Each addon can, optionally, register one or more <code>AddonSetupHook</code> classes to manage its lifecycle events. In this tutorial, we\u2019ll implement a basic <code>AddonSetupHook</code> to simulate tasks executed during addon startup and shutdown.</p>"},{"location":"tutorials/hello_world_2/#1-add-the-setup-file-to-your-addon","title":"1\ufe0f\u20e3 Add the Setup File to Your Addon","text":"<p>Inside your <code>hello_world</code> addon directory, create a new Python file named <code>addon_setup.py</code> (or any other name you prefer). Your addon structure should look like this:</p> <pre><code>my_addons/\n\u2514\u2500\u2500 hello_world/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 manifest.yaml\n    \u251c\u2500\u2500 addon_setup.py\n    \u2514\u2500\u2500 routers.py\n</code></pre>"},{"location":"tutorials/hello_world_2/#2-define-the-addonsetuphook","title":"2\ufe0f\u20e3 Define the <code>AddonSetupHook</code>","text":"<p>Now, import <code>AddonSetupHook</code> and subclass it. You\u2019ll need to implement the asynchronous <code>startup</code> and <code>shutdown</code> methods. Here\u2019s a basic example that simulates some heavy async tasks using <code>sleep</code>:</p> <pre><code>from asyncio import sleep\nfrom logging import getLogger\n\nfrom papi.core.addons import AddonSetupHook\n\nlogger = getLogger(__name__)\n\n\nclass HelloWorldAddonSetup(AddonSetupHook):\n    async def startup(self):\n        logger.info(\"Initializing 'Hello World' addon...\")\n        await sleep(10)  # Simulate a heavy async task at startup\n        logger.info(\"'Hello World' addon setup completed.\")\n\n    async def shutdown(self):\n        logger.info(\"Shutting down 'Hello World' addon...\")\n        await sleep(5)  # Simulate a heavy async task at shutdown\n        logger.info(\"'Hello World' addon shutdown completed.\")\n</code></pre>"},{"location":"tutorials/hello_world_2/#3-register-the-hook-in-__init__py","title":"3\ufe0f\u20e3 Register the Hook in <code>__init__.py</code>","text":"<p>Finally, import your <code>HelloWorldAddonSetup</code> class in the addon's <code>__init__.py</code> so that pAPI can discover and register it automatically:</p> <pre><code>from .router import router as hello_router\nfrom .addon_setup import HelloWorldAddonSetup\n</code></pre> <p>That\u2019s all you need!</p> <p>When the addon is loaded, the <code>startup</code> method will be executed automatically. When the application is stopped (e.g. by pressing <code>Ctrl+C</code> while running with <code>uvicorn</code>), the <code>shutdown</code> method will be called.</p>"},{"location":"tutorials/hello_world_2/#whats-next","title":"\u2705 What's Next?","text":"<ul> <li>Add MongoDB models using Beanie</li> </ul>"},{"location":"tutorials/weather_mongodb/","title":"\ud83c\udf26\ufe0f Weather Addon Example (MongoDB Version)","text":"<p>This addon demonstrates how to build a basic weather data API using pAPI, with persistent storage in MongoDB via the integrated Beanie ODM.</p> <p>Through this example, you will learn how to:</p> <ul> <li>Integrate MongoDB using Beanie</li> <li>Add Python dependencies to your addon</li> <li>Register and list weather stations</li> <li>Fetch real-time weather data from an external API</li> </ul> <p>\ud83d\udca1 Bonus: Learn how to interact with MongoDB using the integrated shell.</p>"},{"location":"tutorials/weather_mongodb/#project-structure","title":"\ud83d\uddc2\ufe0f Project Structure","text":"<pre><code>my_addons/\n\u2514\u2500\u2500 weather/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 manifest.yaml\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 crud.py\n    \u2514\u2500\u2500 routers.py\n</code></pre>"},{"location":"tutorials/weather_mongodb/#manifestyaml","title":"\ud83d\udcc4 <code>manifest.yaml</code>","text":"<p>Declares the addon and its required dependencies:</p> <pre><code>name: weather\nversion: 1.0.0\ndescription: Weather data API\nauthor: Your Name\n\npython_dependencies:\n  - \"requests&gt;=2.28.0\"\n</code></pre>"},{"location":"tutorials/weather_mongodb/#modelspy","title":"\ud83e\uddec <code>models.py</code>","text":"<p>Defines the database models for weather stations and readings:</p> <pre><code>from datetime import datetime, timezone\nfrom beanie import Document, PydanticObjectId\nfrom pydantic import BaseModel, Field\n\n\nclass Location(BaseModel):\n    latitude: float\n    longitude: float\n\n\nclass WeatherStation(Document):\n    name: str\n    location: Location\n    created_at: datetime = Field(\n        default_factory=lambda: datetime.now(tz=timezone.utc)\n    )\n\n    class Settings:\n        name = \"weather_stations\"\n\n\nclass WeatherReading(Document):\n    station_id: PydanticObjectId\n    temperature: float\n    windspeed: float\n    humidity: float\n    timestamp: datetime = Field(default_factory=lambda: datetime.now(tz=timezone.utc))\n\n    class Settings:\n        name = \"weather_readings\"\n</code></pre>"},{"location":"tutorials/weather_mongodb/#routerspy","title":"\ud83d\udd0c <code>routers.py</code>","text":"<p>Handles the REST API endpoints:</p> <pre><code>from fastapi import HTTPException\nfrom papi.core.response import create_response\nfrom papi.core.router import RESTRouter\n\nfrom .crud import get_weather\nfrom .models import WeatherReading, WeatherStation\n\nrouter = RESTRouter()\n\n\n@router.get(\"/stations\")\nasync def list_stations():\n    \"\"\"List all registered weather stations.\"\"\"\n    stations = await WeatherStation.find_all().to_list()\n    return create_response(data=stations)\n\n\n@router.post(\"/stations\")\nasync def create_station(station: WeatherStation):\n    \"\"\"Register a new weather station.\"\"\"\n    await station.create()\n    return create_response(message=\"Station created successfully\", data=station)\n\n\n@router.get(\"/stations/{station_id}/weather\")\nasync def get_current_weather_for_station(station_id: str):\n    \"\"\"\n    Fetch the current weather data for a given station.\n    Also saves the reading to the database.\n    \"\"\"\n    station = await WeatherStation.get(station_id)\n    if not station:\n        raise HTTPException(status_code=404, detail=\"Station not found\")\n\n    weather = get_weather(station.location.latitude, station.location.longitude)\n\n    await WeatherReading(station_id=station.id, **weather).save()\n\n    return create_response(data=weather)\n</code></pre>"},{"location":"tutorials/weather_mongodb/#crudpy","title":"\ud83c\udf10 <code>crud.py</code>","text":"<p>Fetches weather data using the Open-Meteo public API:</p> <pre><code>import requests\n\ndef get_weather(latitude: float, longitude: float) -&gt; dict:\n    \"\"\"\n    Fetch current weather data using the Open-Meteo API (no API key required).\n    \"\"\"\n    url = (\n        \"https://api.open-meteo.com/v1/forecast\"\n        f\"?latitude={latitude}&amp;longitude={longitude}\"\n        \"&amp;current=temperature_2m,wind_speed_10m,relative_humidity_2m\"\n    )\n\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n        data = response.json()\n\n        current = data.get(\"current\")\n        if not current:\n            raise ValueError(\"Missing 'current' field in API response\")\n\n        return {\n            \"temperature\": current[\"temperature_2m\"],\n            \"windspeed\": current[\"wind_speed_10m\"],\n            \"humidity\": current[\"relative_humidity_2m\"]\n        }\n\n    except Exception as e:\n        return {\n            \"temperature\": None,\n            \"windspeed\": None,\n            \"humidity\": None,\n            \"error\": str(e)\n        }\n</code></pre>"},{"location":"tutorials/weather_mongodb/#__init__py","title":"\ud83d\udce6 <code>__init__.py</code>","text":"<p>This file registers your addon so it can be discovered and loaded by pAPI.</p> <p>It also registers the Beanie documents so they are initialized with the MongoDB connection during pAPI startup.</p> <pre><code>from .models import WeatherReading, WeatherStation\nfrom .router import router\n\n# Register the API router and Beanie documents for MongoDB\n__all__ = [\n    \"router\",              # Registers the API routes\n    \"WeatherStation\",      # Registers the weather station document\n    \"WeatherReading\"       # Registers the weather reading document\n]\n</code></pre>"},{"location":"tutorials/weather_mongodb/#configuration-configyaml","title":"\u2699\ufe0f Configuration (<code>config.yaml</code>)","text":"<pre><code># base configuration check the hello world example\n... \n\n# MongoDB connection settings\ndatabase:\n  mongodb_uri: \"mongodb://root:example@localhost:27017/weather_db?authSource=admin\"\n\n# Enable the weather addon\naddons:\n  extra_addons_path: \"my_addons\"\n  enabled:\n    - weather\n</code></pre>"},{"location":"tutorials/weather_mongodb/#how-to-use","title":"\ud83e\uddea How to Use","text":""},{"location":"tutorials/weather_mongodb/#start-the-api-server","title":"\ud83d\ude80 Start the API Server","text":"<pre><code>rye run python papi/cli.py webserver\n</code></pre>"},{"location":"tutorials/weather_mongodb/#create-a-weather-station","title":"\ud83d\udccd Create a Weather Station","text":"<pre><code>curl -X 'POST' \\\n  'http://localhost:8000/stations' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"Santa Clara, Cuba\",\n  \"location\": {\n    \"latitude\": 22.4067,\n    \"longitude\": -79.9531\n  }\n}'\n</code></pre>"},{"location":"tutorials/weather_mongodb/#example-response","title":"\u2705 Example Response","text":"<pre><code>{\n  \"success\": true,\n  \"message\": \"Station created successfully\",\n  \"data\": {\n    \"_id\": \"684da177ebcda212e2ce8dac\",\n    \"name\": \"Santa Clara, Cuba\",\n    \"location\": {\n      \"latitude\": 22.4067,\n      \"longitude\": -79.9531\n    },\n    \"created_at\": \"2025-06-14T16:21:11.352782Z\"\n  },\n  \"error\": null,\n  \"meta\": { ... }\n}\n</code></pre>"},{"location":"tutorials/weather_mongodb/#list-all-stations","title":"\ud83d\udccb List All Stations","text":"<pre><code>curl -X 'GET' \\\n  'http://localhost:8000/stations' \\\n  -H 'accept: application/json'\n</code></pre>"},{"location":"tutorials/weather_mongodb/#example-response_1","title":"\u2705 Example Response","text":"<pre><code>{\n  \"success\": true,\n  \"message\": null,\n  \"data\": [\n    {\n      \"_id\": \"684daa34dc94122d9d84bac9\",\n      \"name\": \"Santa Clara, Cuba\",\n      \"location\": {\n        \"latitude\": 22.4067,\n        \"longitude\": -79.9531\n      },\n      \"created_at\": \"2025-06-14T16:58:28.540000\"\n    }\n  ],\n  \"error\": null,\n  \"meta\": {\n    \"timestamp\": \"2025-06-14T17:17:01+00:00Z\",\n    \"requestId\": \"888ecf22-ea67-4f37-87e1-c13d6f32cfea\"\n  }\n}\n</code></pre>"},{"location":"tutorials/weather_mongodb/#get-weather-for-a-station","title":"\ud83c\udf21\ufe0f Get Weather for a Station","text":"<pre><code>curl -X 'GET' \\\n  'http://localhost:8000/stations/684da177ebcda212e2ce8dac/weather' \\\n  -H 'accept: application/json' \n</code></pre>"},{"location":"tutorials/weather_mongodb/#example-response_2","title":"\u2705 Example Response","text":"<pre><code>{\n  \"success\": true,\n  \"message\": null,\n  \"data\": {\n    \"temperature\": 31.2,\n    \"windspeed\": 18.7,\n    \"humidity\": 56\n  },\n  \"error\": null,\n  \"meta\": { ... }\n}\n</code></pre>"},{"location":"tutorials/weather_mongodb/#mongodb-shell-access-via-papi-shell","title":"\ud83d\udee0\ufe0f MongoDB Shell Access (via pAPI Shell)","text":"<p>Access the MongoDB shell:</p> <pre><code>rye run python papi/cli.py shell\n</code></pre>"},{"location":"tutorials/weather_mongodb/#available-documents","title":"\ud83d\udd0d Available Documents","text":"<pre><code>In [1]: mongo_documents\nOut[1]:\n{\n  'WeatherStation': weather.models.WeatherStation,\n  'WeatherReading': weather.models.WeatherReading\n}\n</code></pre>"},{"location":"tutorials/weather_mongodb/#list-stations-in-shell","title":"\ud83e\uddfe List Stations in Shell","text":"<pre><code>In [2]: await mongo_documents[\"WeatherStation\"].find().to_list()\n</code></pre>"},{"location":"tutorials/weather_mongodb/#rename-a-station","title":"\u270f\ufe0f Rename a Station","text":"<pre><code>In [3]: from beanie import BeanieObjectId as ObjectId\nIn [4]: station = await mongo_documents[\"WeatherStation\"].get(ObjectId('684daa34dc94122d9d84bac9'))\nIn [5]: station.name = \"New Santa Clara\"\nIn [6]: await station.save()\n</code></pre> <p>Confirm the change:</p> <pre><code>In [7]: await mongo_documents[\"WeatherStation\"].get(ObjectId('684daa34dc94122d9d84bac9'))\nOut[7]: WeatherStation(name='New Santa Clara', ...)\n</code></pre>"},{"location":"tutorials/weather_mongodb/#whats-next","title":"\u2705 What's Next?","text":"<ul> <li>Add SQL models using SQLAlchemy</li> </ul>"},{"location":"tutorials/weather_sqlalchemy/","title":"\ud83c\udf26\ufe0f Weather Addon Example (SQLAlchemy Version)","text":"<p>This addon showcases how to build a basic weather data API using pAPI, now powered by SQLAlchemy for persistent storage.</p> <p>With this example, you will learn how to:</p> <ul> <li>Integrate an SQL database using SQLAlchemy's async engine</li> <li>Declare and manage Python dependencies within your addon</li> <li>Register and list weather stations</li> <li>Retrieve and save real-time weather data from an external API</li> </ul>"},{"location":"tutorials/weather_sqlalchemy/#project-structure","title":"\ud83d\uddc2\ufe0f Project Structure","text":"<pre><code>my_addons/\n\u2514\u2500\u2500 weather/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 manifest.yaml\n    \u251c\u2500\u2500 models.py\n    \u251c\u2500\u2500 schemas.py\n    \u251c\u2500\u2500 crud.py\n    \u2514\u2500\u2500 routers.py\n</code></pre>"},{"location":"tutorials/weather_sqlalchemy/#manifestyaml","title":"\ud83d\udcc4 <code>manifest.yaml</code>","text":"<p>Defines the addon metadata and required Python packages:</p> <pre><code>name: weather\nversion: 1.0.0\ndescription: Weather data API (SQLAlchemy version)\nauthor: Your Name\n\npython_dependencies:\n  - \"requests&gt;=2.28.0\"\n</code></pre>"},{"location":"tutorials/weather_sqlalchemy/#modelspy","title":"\ud83e\uddec <code>models.py</code>","text":"<pre><code>from datetime import datetime\n\nfrom sqlalchemy import Column, DateTime, Float, ForeignKey, Integer, String\nfrom sqlalchemy.orm import declarative_base, relationship\n\nBase = declarative_base()\n\nclass WeatherStation(Base):\n    __tablename__ = \"weather_stations\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, nullable=False)\n    latitude = Column(Float, nullable=False)\n    longitude = Column(Float, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    readings = relationship(\"WeatherReading\", back_populates=\"station\")\n\n\nclass WeatherReading(Base):\n    __tablename__ = \"weather_readings\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    station_id = Column(Integer, ForeignKey(\"weather_stations.id\"))\n    temperature = Column(Float)\n    windspeed = Column(Float)\n    humidity = Column(Float)\n    timestamp = Column(DateTime, default=datetime.utcnow)\n\n    station = relationship(\"WeatherStation\", back_populates=\"readings\")\n</code></pre>"},{"location":"tutorials/weather_sqlalchemy/#schemaspy","title":"\ud83d\udcca <code>schemas.py</code>","text":"<pre><code>from datetime import datetime\nfrom pydantic import BaseModel\n\nclass WeatherStationBase(BaseModel):\n    name: str\n    latitude: float\n    longitude: float\n\nclass WeatherStationCreate(WeatherStationBase):\n    pass\n\nclass WeatherStationOut(WeatherStationBase):\n    id: int\n    created_at: datetime\n\n    class Config:\n        orm_mode = True\n\nclass WeatherReadingOut(BaseModel):\n    id: int\n    station_id: int\n    temperature: float | None\n    windspeed: float | None\n    humidity: float | None\n    timestamp: datetime\n\n    class Config:\n        orm_mode = True\n</code></pre>"},{"location":"tutorials/weather_sqlalchemy/#crudpy","title":"\ud83c\udf10 <code>crud.py</code>","text":"<pre><code>import requests\n\ndef get_weather(latitude: float, longitude: float) -&gt; dict:\n    url = (\n        \"https://api.open-meteo.com/v1/forecast\"\n        f\"?latitude={latitude}&amp;longitude={longitude}\"\n        \"&amp;current=temperature_2m,wind_speed_10m,relative_humidity_2m\"\n    )\n\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n        current = response.json().get(\"current\")\n        if not current:\n            raise ValueError(\"Missing 'current' field in API response\")\n\n        return {\n            \"temperature\": current[\"temperature_2m\"],\n            \"windspeed\": current[\"wind_speed_10m\"],\n            \"humidity\": current[\"relative_humidity_2m\"]\n        }\n\n    except Exception as e:\n        return {\n            \"temperature\": None,\n            \"windspeed\": None,\n            \"humidity\": None,\n            \"error\": str(e)\n        }\n</code></pre>"},{"location":"tutorials/weather_sqlalchemy/#routerspy","title":"\ud83d\udd0c <code>routers.py</code>","text":"<p>pAPI provides the <code>sql_session</code> dependency, which you can use directly as a router dependency in your route functions. Alternatively, you can use the asynchronous context manager <code>get_sql_session</code> that yields a SQLAlchemy session within an async context.</p> <pre><code>from fastapi import Depends, HTTPException\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.future import select\n\nfrom papi.core.db import sql_session, get_sql_session\nfrom papi.core.router import RESTRouter\n\nfrom . import models, schemas\nfrom .crud import get_weather\n\nrouter = RESTRouter()\n\n\n@router.post(\"/stations\", response_model=schemas.WeatherStationOut)\nasync def create_station(\n    station: schemas.WeatherStationCreate, db: AsyncSession = Depends(sql_session)\n):\n    new_station = models.WeatherStation(\n        name=station.name, latitude=station.latitude, longitude=station.longitude\n    )\n    db.add(new_station)\n    await db.commit()\n    await db.refresh(new_station)\n    return new_station\n\n\n@router.get(\"/stations\", response_model=list[schemas.WeatherStationOut])\nasync def list_stations(db: AsyncSession = Depends(sql_session)):\n    result = await db.execute(select(models.WeatherStation))\n    return result.scalars().all()\n\n\n@router.get(\"/stations/{station_id}/weather\", response_model=schemas.WeatherReadingOut)\nasync def get_current_weather(station_id: int):\n    # Using get_sql_session context here\n    async with get_sql_session() as session:\n        result = await session.execute(\n            select(models.WeatherStation).where(models.WeatherStation.id == station_id)\n        )\n        station = result.scalar_one_or_none()\n        if not station:\n            raise HTTPException(status_code=404, detail=\"Station not found\")\n\n        weather = get_weather(station.latitude, station.longitude)\n        reading = models.WeatherReading(\n            station_id=station.id,\n            temperature=weather[\"temperature\"],\n            windspeed=weather[\"windspeed\"],\n            humidity=weather[\"humidity\"],\n        )\n        session.add(reading)\n        await session.commit()\n        await session.refresh(reading)\n        return reading\n</code></pre>"},{"location":"tutorials/weather_sqlalchemy/#__init__py","title":"\ud83d\udcc6 <code>__init__.py</code>","text":"<pre><code>from . import models, routers\n\n__all__ = [\"router\",\"models\"]\n</code></pre>"},{"location":"tutorials/weather_sqlalchemy/#main-papi-configuration-configyaml","title":"\u2699\ufe0f Main papi configuration (<code>config.yaml</code>)","text":"<pre><code># Base configuration \u2013 see the Hello World example\n...\n\n# SQLAlchemy connection settings (example using SQLite)\ndatabase:\n  sqlalchemy_uri: \"sqlite+aiosqlite:///./weather.db\"\n  backends:\n    sqlalchemy:\n      echo: false  # Optional: enables SQL query logging\n\n# Enable the weather addon\naddons:\n  extra_addons_path: \"my_addons\"\n  enabled:\n    - weather\n</code></pre> <p>pAPI allows fine-tuning of the database engine by providing additional configuration under the <code>backends</code> section in <code>config.yaml</code>.</p>"},{"location":"tutorials/weather_sqlalchemy/#how-to-use","title":"\ud83d\ude9c How to Use","text":""},{"location":"tutorials/weather_sqlalchemy/#start-the-api-server","title":"\ud83d\ude80 Start the API Server","text":"<p><pre><code>rye run python papi/cli.py webserver\n</code></pre> Once the pAPI server is started, the system will automatically detect the SQLAlchemy models and route definitions, initialize the corresponding database tables, and register the API endpoints with the main FastAPI application.</p> <p>Add a station:</p> <pre><code>curl -X 'POST' \\\n  'http://127.0.0.1:8000/stations' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"Santa Clara, Cuba\",\n  \"latitude\": 22.4067,\n  \"longitude\": -79.9531\n}'\n</code></pre> <p>Response:</p> <pre><code>{\n  \"id\": 1,\n  \"name\": \"Santa Clara, Cuba\",\n  \"latitude\": 22.4067,\n  \"longitude\": -79.9531,\n  \"created_at\": \"2025-06-25T14:00:14.162273\"\n}\n</code></pre> <p>List all stations:</p> <pre><code>curl -X 'GET' \\\n  'http://localhost:8080/stations' \\\n  -H 'accept: application/json'\n</code></pre> <p>Response:</p> <pre><code>[\n  {\n    \"id\": 1,\n    \"name\": \"Santa Clara, Cuba\",\n    \"latitude\": 22.4067,\n    \"longitude\": -79.9531,\n    \"created_at\": \"2025-06-25T14:00:14.162273\"\n  }\n]\n</code></pre> <p>Get weather data for station 1:</p> <pre><code>curl -X 'GET' \\\n  'http://localhost:8000/stations/1/weather' \\\n  -H 'accept: application/json'\n</code></pre> <p>Response:</p> <pre><code>{\n  \"id\": 1,\n  \"station_id\": 1,\n  \"temperature\": 28.3,\n  \"windspeed\": 15.4,\n  \"humidity\": 71.0,\n  \"timestamp\": \"2025-06-25T14:05:48.300713\"\n}\n</code></pre>"},{"location":"tutorials/weather_sqlalchemy/#whats-next","title":"\u2705 What's Next?","text":"<ul> <li>Serve static files</li> </ul>"},{"location":"tutorials/website/","title":"Simple Website","text":"<p>In this tutorial, we demonstrate how to use static files within each addon module. Although the main focus of pAPI, like FastAPI, is on building APIs rather than full-stack web applications (like Django), pAPI can still serve static files and web pages easily.</p> <p>This example is not intended to cover template engines or advanced web development techniques. Instead, it focuses on how to serve static assets using a basic HTML response as an example.</p> <p>During the addon discovery and initialization process, pAPI will automatically detect a <code>static</code> folder at the root of your addon. If such a folder exists, it will be mounted as a static file directory for your module (and made available globally across all modules). This allows you to structure your addon as follows:</p>"},{"location":"tutorials/website/#project-structure","title":"\ud83d\uddc2\ufe0f Project Structure","text":"<pre><code>my_addons/\n\u2514\u2500\u2500 website/\n    \u251c\u2500\u2500 static/\n    \u2502   \u2514\u2500\u2500 style.css\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 manifest.yaml\n    \u2514\u2500\u2500 routers.py\n</code></pre>"},{"location":"tutorials/website/#stylecss","title":"\ud83c\udfa8 <code>style.css</code>","text":"<p>Here's the styling for our simple page:</p> <pre><code>body {\n    font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;\n    background-color: #f9fafb;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    color: #2c3e50;\n}\n.container {\n    text-align: center;\n    background-color: #ffffff;\n    padding: 2.5rem 3rem;\n    border-radius: 1rem;\n    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);\n    max-width: 500px;\n}\nh1 {\n    font-size: 2.25rem;\n    margin-bottom: 0.5rem;\n}\n.subtitle {\n    font-size: 1.1rem;\n    color: #7f8c8d;\n    margin-bottom: 1.5rem;\n}\n.status-dot {\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    background-color: #2ecc71;\n    margin-right: 8px;\n    vertical-align: middle;\n}\n.footer {\n    margin-top: 2rem;\n    font-size: 0.9rem;\n    color: #95a5a6;\n}\nb {\n    font-weight: 600;\n}\n.btn {\n    display: inline-block;\n    margin-top: 1.5rem;\n    padding: 0.75rem 1.5rem;\n    font-size: 1rem;\n    color: #fff;\n    background-color: #3498db;\n    border: none;\n    border-radius: 8px;\n    text-decoration: none;\n    transition: background-color 0.3s ease;\n}\n.btn:hover {\n    background-color: #2980b9;\n}\n</code></pre>"},{"location":"tutorials/website/#routerspy","title":"\ud83c\udf10 <code>routers.py</code>","text":"<pre><code>from fastapi.responses import HTMLResponse\nfrom papi.core.router import RESTRouter\n\nwebsite_router = RESTRouter()\n\n\n@website_router.http(\"/\")\nasync def website_index():\n    html_content = \"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html lang=\"en\"&gt;\n        &lt;head&gt;\n            &lt;meta charset=\"UTF-8\"&gt;\n            &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n            &lt;title&gt;pAPI - Pluggable API&lt;/title&gt;\n            &lt;link rel=\"stylesheet\" href=\"/website/style.css\"&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;div class=\"container\"&gt;\n                &lt;h1&gt;pAPI&lt;/h1&gt;\n                &lt;p class=\"subtitle\"&gt;&lt;b&gt;p&lt;/b&gt;luggable &lt;b&gt;API&lt;/b&gt; platform&lt;/p&gt;\n                &lt;p&gt;&lt;span class=\"status-dot\"&gt;&lt;/span&gt;Server is &lt;b&gt;online&lt;/b&gt; and ready&lt;/p&gt;\n                &lt;a href=\"https://efirvida.github.io/pAPI/\" class=\"btn\"&gt;\ud83d\udcd8 Open API Docs&lt;/a&gt;\n                &lt;div class=\"footer\"&gt;\n                    FastAPI \u00b7 Uvicorn\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)\n</code></pre> <p>Note: Static files will be available under <code>/addons_name/</code> path prefix.</p>"},{"location":"tutorials/website/#__init__py","title":"\ud83d\udce6 <code>__init__.py</code>","text":"<p>To activate the routes, just import the <code>routers.py</code> in your module:</p> <pre><code>from . import routes\n</code></pre>"},{"location":"tutorials/website/#manifestyaml","title":"\ud83d\udcc4 <code>manifest.yaml</code>","text":"<pre><code>title: \"Website Module\"\nversion: \"0.1.0\"\ndescription: \"Base module for public website interface and assets.\"\n</code></pre>"},{"location":"tutorials/website/#configyaml","title":"\u2699\ufe0f <code>config.yaml</code>","text":"<p>Activate the addon by adding it to your configuration:</p> <pre><code># Base configuration \u2013 see the Hello World example\n...\n\naddons:\n  extra_addons_path: \"my_addons\"\n  enabled:\n    - website\n</code></pre>"},{"location":"tutorials/website/#launch-the-server","title":"\ud83d\ude80 Launch the server","text":"<pre><code>rye run python papi/cli.py webserver\n</code></pre>"},{"location":"tutorials/website/#global-static-file-storage","title":"\ud83d\uddc3\ufe0f Global Static File Storage","text":"<p>pAPI also provides a global static file configuration, designed for serving static assets like images, documents, videos, etc., independently of any addon. This can be useful when your API needs to act as a file server.</p> <p>You can configure it in the <code>config.yaml</code> under the <code>storage</code> section. Although this feature wasn\u2019t originally intended for serving stylesheets, you can use it creatively, like so:</p> <pre><code># Base configuration \u2013 see the Hello World example\n...\n\naddons:\n  extra_addons_path: \"my_addons\"\n  enabled:\n    - website\n\nstorage:\n  styles: my_addons/website/static\n</code></pre> <p>Then, in your HTML, reference static assets like this:</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"/storage/styles/style.css\"&gt;\n</code></pre> <p>This approach allows centralized serving of static assets across your entire API.</p>"}]}